{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{95:function(t,s,n){\"use strict\";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"div\",{staticClass:\"content\"},[n(\"p\",[t._v(\"A light, featureful and explicit option parsing library for node.js.\")]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),n(\"p\",[t._v(\"Some example output from this script (foo.js):\")]),t._m(9),n(\"p\",[t._v(\"See the \"),n(\"router-link\",{attrs:{to:\"examples/\"}},[t._v('\"examples\"')]),t._v(\" dir for a number of starter examples using\\nsome of dashdash's features.\")],1),t._m(10),n(\"p\",[t._v(\"If you want to allow environment variables to specify options to your tool,\\ndashdash makes this easy. We can change the 'verbose' option in the example\\nabove to include an 'env' field:\")]),t._m(11),t._m(12),t._m(13),n(\"p\",[t._v(\"Boolean options will interpret the empty string as unset, '0' as false\\nand anything else as true.\")]),t._m(14),n(\"p\",[t._v(\"Non-booleans can be used as well. Strings:\")]),t._m(15),n(\"p\",[t._v(\"Numbers:\")]),t._m(16),t._m(17),t._m(18),t._m(19),n(\"p\",[t._v('Dashdash provides a simple way to create a Bash completion file that you\\ncan place in your \"bash_completion.d\" directory -- sometimes that is\\n\"/usr/local/etc/bash_completion.d/\"). Features:')]),n(\"ul\",[n(\"li\",[t._v(\"Support for short and long opts\")]),n(\"li\",[t._v(\"Support for knowing which options take arguments\")]),n(\"li\",[t._v(\"Support for subcommands (e.g. 'git log \"),n(\"TAB\",[t._v(\"' to show just options for the\\nlog subcommand). See\\n\"),n(\"a\",{attrs:{href:\"https://github.com/trentm/node-cmdln#bash-completion\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"node-cmdln\")]),t._v(\" for\\nhow to integrate that.\")])],1),n(\"li\",[t._v('Does the right thing with \"--\" to stop options.')]),n(\"li\",[t._v(\"Custom optarg and arg types for custom completions.\")])]),n(\"p\",[t._v(\"Dashdash will return bash completion file content given a parser instance:\")]),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),n(\"p\",[t._v(\"Example using all fields (required fields are noted):\")]),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),n(\"p\",[t._v(\"Dashdash includes a good starter set of option types that it will parse for\\nyou. However, you can add your own via:\")]),t._m(43),n(\"p\",[t._v(\"For example, a simple option type that accepts 'yes', 'y', 'no' or 'n' as\\na boolean argument would look like:\")]),t._m(44),t._m(45),t._m(46),n(\"p\",[t._v(\"Why another node.js option parsing lib?\")]),t._m(47),t._m(48),n(\"p\",[t._v(\"MIT. See LICENSE.txt.\")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"a\",{attrs:{href:\"#why\"}},[this._v(\"Why another one? See below\")]),this._v(\". tl;dr: The others I've tried are one of\\ntoo loosey goosey (not explicit), too big/too many deps, or ill specified.\\nYMMV.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"Follow \"),s(\"a\",{attrs:{href:\"https://twitter.com/intent/user?screen_name=trentmick\",target:\"_blank\"}},[this._v(\"@trentmick\")]),this._v(\"\\nfor updates to node-dashdash.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"install\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#install\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Install\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",[s(\"code\",[this._v(\"npm install dashdash\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"usage\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#usage\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Usage\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" dashdash \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'dashdash'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Specify the options. Minimally `name` (or `names`) and `type`\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// must be given for each.\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" options \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// `names` or a single `name`. First element is the `opts.KEY`.\")]),t._v(\"\\n        names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'help'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'h'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v('// See \"Option specs\" below for types.')]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'bool'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'Print this help and exit.'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Shortcut form. As called it infers `process.argv`. See below for\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// the longer form to use methods like `.help()` on the Parser object.\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" opts \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" dashdash\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parse\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"options\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" options\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nconsole\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"opts:\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" opts\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"args:\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" opts\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"_args\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"longer-example\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#longer-example\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Longer Example\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"A more realistic \"),s(\"a\",{attrs:{href:\"./examples/foo.js\"}},[this._v('starter script \"foo.js\"')]),this._v(\" is as follows.\\nThis also shows using \"),s(\"code\",[this._v(\"parser.help()\")]),this._v(\" for formatted option help.\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" dashdash \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'./lib/dashdash'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" options \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'version'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'bool'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'Print tool version and exit.'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'help'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'h'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'bool'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'Print this help and exit.'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'verbose'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'v'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'arrayOfBool'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'Verbose output. Use multiple times for more verbose.'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'file'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'f'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'string'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'File to process'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        helpArg\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'FILE'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" parser \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" dashdash\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createParser\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"options\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" options\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" opts \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" parser\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parse\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"process\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"argv\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"e\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    console\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"error\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'foo: error: %s'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" e\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"message\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    process\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"exit\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\nconsole\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"# opts:\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" opts\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"# args:\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" opts\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"_args\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Use `parser.help()` for formatted options help.\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"opts\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" help \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" parser\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"help\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"includeEnv\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"trimRight\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    console\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'usage: node foo.js [OPTIONS]\\\\n'\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'options:\\\\n'\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    process\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"exit\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// ...\")]),t._v(\"\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[this._v(\"$ node foo.js -h\\n# opts: { help: true,\\n  _order: [ { name: 'help', value: true, from: 'argv' } ],\\n  _args: [] }\\n# args: []\\nusage: node foo.js [OPTIONS]\\noptions:\\n    --version             Print tool version and exit.\\n    -h, --help            Print this help and exit.\\n    -v, --verbose         Verbose output. Use multiple times for more verbose.\\n    -f FILE, --file=FILE  File to process\\n\\n$ node foo.js -v\\n# opts: { verbose: [ true ],\\n  _order: [ { name: 'verbose', value: true, from: 'argv' } ],\\n  _args: [] }\\n# args: []\\n\\n$ node foo.js --version arg1\\n# opts: { version: true,\\n  _order: [ { name: 'version', value: true, from: 'argv' } ],\\n  _args: [ 'arg1' ] }\\n# args: [ 'arg1' ]\\n\\n$ node foo.js -f bar.txt\\n# opts: { file: 'bar.txt',\\n  _order: [ { name: 'file', value: 'bar.txt', from: 'argv' } ],\\n  _args: [] }\\n# args: []\\n\\n$ node foo.js -vvv --file=blah\\n# opts: { verbose: [ true, true, true ],\\n  file: 'blah',\\n  _order:\\n   [ { name: 'verbose', value: true, from: 'argv' },\\n     { name: 'verbose', value: true, from: 'argv' },\\n     { name: 'verbose', value: true, from: 'argv' },\\n     { name: 'file', value: 'blah', from: 'argv' } ],\\n  _args: [] }\\n# args: []\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"environment-variable-integration\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#environment-variable-integration\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Environment variable integration\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[t._v(\"    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'verbose'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'v'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'arrayOfBool'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        env\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'FOO_VERBOSE'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"         \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// <--- add this line\")]),t._v(\"\\n        help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'Verbose output. Use multiple times for more verbose.'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"then the \"),s(\"strong\",[this._v('\"FOO_VERBOSE\" environment variable')]),this._v(\" can be used to set this\\noption:\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[n(\"code\",[t._v(\"$ FOO_VERBOSE\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"1 node foo.js\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# opts: { verbose: [ true ],\")]),t._v(\"\\n  _order: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" name: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'verbose'\")]),t._v(\", value: true, from: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'env'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\",\\n  _args: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# args: []\")]),t._v(\"\\n\")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[n(\"code\",[t._v(\"$ FOO_VERBOSE\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" node examples/foo.js                 \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# not set\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# opts: { _order: [], _args: [] }\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# args: []\")]),t._v(\"\\n\\n$ FOO_VERBOSE\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"0 node examples/foo.js                \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# '0' is false\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# opts: { verbose: [ false ],\")]),t._v(\"\\n  _order: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" key: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'verbose'\")]),t._v(\", value: false, from: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'env'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\",\\n  _args: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# args: []\")]),t._v(\"\\n\\n$ FOO_VERBOSE\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"1 node examples/foo.js                \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# true\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# opts: { verbose: [ true ],\")]),t._v(\"\\n  _order: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" key: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'verbose'\")]),t._v(\", value: true, from: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'env'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\",\\n  _args: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# args: []\")]),t._v(\"\\n\\n$ FOO_VERBOSE\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"boogabooga node examples/foo.js       \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# true\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# opts: { verbose: [ true ],\")]),t._v(\"\\n  _order: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" key: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'verbose'\")]),t._v(\", value: true, from: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'env'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\",\\n  _args: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# args: []\")]),t._v(\"\\n\")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[n(\"code\",[t._v(\"$ FOO_FILE\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"data.txt node examples/foo.js\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# opts: { file: 'data.txt',\")]),t._v(\"\\n  _order: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" key: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'file'\")]),t._v(\", value: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'data.txt'\")]),t._v(\", from: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'env'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\",\\n  _args: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# args: []\")]),t._v(\"\\n\")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[n(\"code\",[t._v(\"$ FOO_TIMEOUT\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"5000 node examples/foo.js\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# opts: { timeout: 5000,\")]),t._v(\"\\n  _order: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" key: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'timeout'\")]),t._v(\", value: 5000, from: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'env'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\",\\n  _args: \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"# args: []\")]),t._v(\"\\n\\n$ FOO_TIMEOUT\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"blarg node examples/foo.js\\nfoo: error: arg \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"FOO_TIMEOUT\"')]),t._v(\" is not a positive integer: \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"blarg\"')]),t._v(\"\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"With the \"),s(\"code\",[this._v(\"includeEnv: true\")]),this._v(\" config to \"),s(\"code\",[this._v(\"parser.help()\")]),this._v(\" the environment\\nvariable can also be included in \"),s(\"strong\",[this._v(\"help output\")]),this._v(\":\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",[s(\"code\",[this._v(\"usage: node foo.js [OPTIONS]\\noptions:\\n    --version             Print tool version and exit.\\n    -h, --help            Print this help and exit.\\n    -v, --verbose         Verbose output. Use multiple times for more verbose.\\n                          Environment: FOO_VERBOSE=1\\n    -f FILE, --file=FILE  File to process\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"bash-completion\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bash-completion\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Bash completion\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",[s(\"code\",[this._v(\"var parser = dashdash.createParser({options: options});\\nconsole.log( parser.bashCompletion({name: 'mycli'}) );\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"or directly from a \"),s(\"code\",[this._v(\"options\")]),this._v(\" array of options specs:\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",[s(\"code\",[this._v(\"var code = dashdash.bashCompletionFromOptions({\\n    name: 'mycli',\\n    options: OPTIONS\\n});\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v('Write that content to \"/usr/local/etc/bash_completion.d/mycli\" and you will\\nhave Bash completions for '),s(\"code\",[this._v(\"mycli\")]),this._v('. Alternatively you can write it to\\nany file (e.g. \"~/.bashrc\") and source it.')])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"You could add a \"),s(\"code\",[this._v(\"--completion\")]),this._v(\" hidden option to your tool that emits the\\ncompletion content and document for your users to call that to install\\nBash completions.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"See \"),s(\"a\",{attrs:{href:\"examples/ddcompletion.js\"}},[this._v(\"examples/ddcompletion.js\")]),this._v(\" for a complete\\nexample, including how one can define bash functions for completion of custom\\noption types. Also see \"),s(\"a\",{attrs:{href:\"https://github.com/trentm/node-cmdln\",target:\"_blank\",rel:\"noopener noreferrer\"}},[this._v(\"node-cmdln\")]),this._v(\" for\\nhow it uses this for Bash completion for full multi-subcommand tools.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"TODO: document specExtra\")]),s(\"li\",[this._v(\"TODO: document includeHidden\")]),s(\"li\",[this._v(\"TODO: document custom types, \"),s(\"code\",[this._v(\"function complete\\\\_FOO\")]),this._v(\" guide, completionType\")]),s(\"li\",[this._v(\"TODO: document argtypes\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"parser-config\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parser-config\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Parser config\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"Parser construction (i.e. \"),s(\"code\",[this._v(\"dashdash.createParser(CONFIG)\")]),this._v(\") takes the\\nfollowing fields:\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ul\",[n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"options\")]),t._v(\" (Array of option specs). Required. See the\\n\"),n(\"a\",{attrs:{href:\"#option-specs\"}},[t._v(\"Option specs\")]),t._v(\" section below.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"interspersed\")]),t._v(\" (Boolean). Optional. Default is true. If true this allows\\ninterspersed arguments and options. I.e.:\")]),n(\"pre\",[n(\"code\",[t._v(\"  node ./tool.js -v arg1 arg2 -h   # '-h' is after interspersed args\\n\")])]),n(\"p\",[t._v(\"Set it to false to have '-h' \"),n(\"strong\",[t._v(\"not\")]),t._v(\" get parsed as an option in the above\\nexample.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"allowUnknown\")]),t._v(\" (Boolean).  Optional.  Default is false.  If false, this causes\\nunknown arguments to throw an error.  I.e.:\")]),n(\"pre\",[n(\"code\",[t._v(\"  node ./tool.js -v arg1 --afe8asefksjefhas\\n\")])]),n(\"p\",[t._v(\"Set it to true to treat the unknown option as a positional\\nargument.\")]),n(\"p\",[n(\"strong\",[t._v(\"Caveat\")]),t._v(\": When a shortopt group, such as \"),n(\"code\",[t._v(\"-xaz\")]),t._v(\" contains a mix of\\nknown and unknown options, the \"),n(\"em\",[t._v(\"entire\")]),t._v(\" group is passed through\\nunmolested as a positional argument.\")]),n(\"p\",[t._v(\"Consider if you have a known short option \"),n(\"code\",[t._v(\"-a\")]),t._v(\", and parse the\\nfollowing command line:\")]),n(\"pre\",[n(\"code\",[t._v(\"  node ./tool.js -xaz\\n\")])]),n(\"p\",[t._v(\"where \"),n(\"code\",[t._v(\"-x\")]),t._v(\" and \"),n(\"code\",[t._v(\"-z\")]),t._v(\" are unknown.  There are multiple ways to\\ninterpret this:\")]),n(\"ol\",[n(\"li\",[n(\"code\",[t._v(\"-x\")]),t._v(\" takes a value: \"),n(\"code\",[t._v(\"{x: 'az'}\")])]),n(\"li\",[n(\"code\",[t._v(\"-x\")]),t._v(\" and \"),n(\"code\",[t._v(\"-z\")]),t._v(\" are both booleans: \"),n(\"code\",[t._v(\"{x:true,a:true,z:true}\")])])]),n(\"p\",[t._v(\"Since dashdash does not know what \"),n(\"code\",[t._v(\"-x\")]),t._v(\" and \"),n(\"code\",[t._v(\"-z\")]),t._v(\" are, it can't know\\nif you'd prefer to receive \"),n(\"code\",[t._v(\"{a:true,_args:['-x','-z']}\")]),t._v(\" or\\n\"),n(\"code\",[t._v(\"{x:'az'}\")]),t._v(\", or \"),n(\"code\",[t._v(\"{_args:['-xaz']}\")]),t._v(\". Leaving the positional arg unprocessed\\nis the easiest mistake for the user to recover from.\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"option-specs\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#option-specs\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Option specs\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'file'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'f'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"       \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Required (one of `names` or `name`).\")]),t._v(\"\\n    type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'string'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"             \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Required.\")]),t._v(\"\\n    completionType\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'filename'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    env\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'MYTOOL_FILE'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    help\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'Config file to load before running \\\"mytool\\\"'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    helpArg\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'PATH'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    helpWrap\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"default\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"resolve\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"process\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"env\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token constant\"}},[t._v(\"HOME\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'.mytoolrc'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"Each option spec in the \"),s(\"code\",[this._v(\"options\")]),this._v(\" array must/can have the following fields:\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ul\",[n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"name\")]),t._v(\" (String) or \"),n(\"code\",[t._v(\"names\")]),t._v(\" (Array). Required. These give the option name\\nand aliases. The first name (if more than one given) is the key for the\\nparsed \"),n(\"code\",[t._v(\"opts\")]),t._v(\" object.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"type\")]),t._v(\" (String). Required. One of:\")]),n(\"ul\",[n(\"li\",[t._v(\"bool\")]),n(\"li\",[t._v(\"string\")]),n(\"li\",[t._v(\"number\")]),n(\"li\",[t._v(\"integer\")]),n(\"li\",[t._v(\"positiveInteger\")]),n(\"li\",[t._v(\"date (epoch seconds, e.g. 1396031701, or ISO 8601 format\\n\"),n(\"code\",[t._v(\"YYYY-MM-DD[THH:MM:SS[.sss][Z]]\")]),t._v(', e.g. \"2014-03-28T18:35:01.489Z\")')]),n(\"li\",[t._v(\"arrayOfBool\")]),n(\"li\",[t._v(\"arrayOfString\")]),n(\"li\",[t._v(\"arrayOfNumber\")]),n(\"li\",[t._v(\"arrayOfInteger\")]),n(\"li\",[t._v(\"arrayOfPositiveInteger\")]),n(\"li\",[t._v(\"arrayOfDate\")])]),n(\"p\",[t._v(\"FWIW, these names attempt to match with asserts on\\n\"),n(\"a\",{attrs:{href:\"https://github.com/mcavage/node-assert-plus\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"assert-plus\")]),t._v(\".\\nYou can add your own custom option types with \"),n(\"code\",[t._v(\"dashdash.addOptionType\")]),t._v(\".\\nSee below.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"completionType\")]),t._v(\" (String). Optional. This is used for \"),n(\"a\",{attrs:{href:\"#bash-completion\"}},[t._v(\"Bash\\ncompletion\")]),t._v(\" for an option argument. If not specified,\\nthen the value of \"),n(\"code\",[t._v(\"type\")]),t._v(\" is used. Any string may be specified, but only the\\nfollowing values have meaning:\")]),n(\"ul\",[n(\"li\",[n(\"code\",[t._v(\"none\")]),t._v(\": Provide no completions.\")]),n(\"li\",[n(\"code\",[t._v(\"file\")]),t._v(\": Bash's default completion (i.e. \"),n(\"code\",[t._v(\"complete -o default\")]),t._v(\"), which\\nincludes filenames.\")]),n(\"li\",[n(\"em\",[t._v(\"Any string FOO for which a \"),n(\"code\",[t._v(\"function complete_FOO\")]),t._v(\" Bash function is\\ndefined.\")]),t._v(\" This is for custom completions for a given tool. Typically\\nthese custom functions are provided in the \"),n(\"code\",[t._v(\"specExtra\")]),t._v(\" argument to\\n\"),n(\"code\",[t._v(\"dashdash.bashCompletionFromOptions()\")]),t._v(\". See\\n\"),n(\"a\",{attrs:{href:\"examples/ddcompletion.js\"}},[t._v('\"examples/ddcompletion.js\"')]),t._v(\" for an example.\")])])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"env\")]),t._v(' (String or Array of String). Optional. An environment variable name\\n(or names) that can be used as a fallback for this option. For example,\\ngiven a \"foo.js\" like this:')]),n(\"pre\",[n(\"code\",[t._v(\"  var options = [{names: ['dry-run', 'n'], env: 'FOO_DRY_RUN'}];\\n  var opts = dashdash.parse({options: options});\\n\")])]),n(\"p\",[t._v(\"Both \"),n(\"code\",[t._v(\"node foo.js --dry-run\")]),t._v(\" and \"),n(\"code\",[t._v(\"FOO_DRY_RUN=1 node foo.js\")]),t._v(\" would result\\nin \"),n(\"code\",[t._v(\"opts.dry_run = true\")]),t._v(\".\")]),n(\"p\",[t._v(\"An environment variable is only used as a fallback, i.e. it is ignored if\\nthe associated option is given in \"),n(\"code\",[t._v(\"argv\")]),t._v(\".\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"help\")]),t._v(\" (String). Optional. Used for \"),n(\"code\",[t._v(\"parser.help()\")]),t._v(\" output.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"helpArg\")]),t._v(' (String). Optional. Used in help output as the placeholder for\\nthe option argument, e.g. the \"PATH\" in:')]),n(\"pre\",[n(\"code\",[t._v(\"  ...\\n  -f PATH, --file=PATH    File to process\\n  ...\\n\")])])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"helpWrap\")]),t._v(\" (Boolean). Optional, default true. Set this to \"),n(\"code\",[t._v(\"false\")]),t._v(\" to have\\nthat option's \"),n(\"code\",[t._v(\"help\")]),n(\"em\",[t._v(\"not\")]),t._v(\" be text wrapped in \"),n(\"code\",[t._v(\"<parser>.help()\")]),t._v(\" output.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"default\")]),t._v(\". Optional. A default value used for this option, if the\\noption isn't specified in argv.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"hidden\")]),t._v(\" (Boolean). Optional, default false. If true, help output will not\\ninclude this option. See also the \"),n(\"code\",[t._v(\"includeHidden\")]),t._v(\" option to\\n\"),n(\"code\",[t._v(\"bashCompletionFromOptions()\")]),t._v(\" for \"),n(\"a\",{attrs:{href:\"#bash-completion\"}},[t._v(\"Bash completion\")]),t._v(\".\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"option-group-headings\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#option-group-headings\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Option group headings\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"You can add headings between option specs in the \"),s(\"code\",[this._v(\"options\")]),this._v(\" array.  To do so,\\nsimply add an object with only a \"),s(\"code\",[this._v(\"group\")]),this._v(\" property -- the string to print as\\nthe heading for the subsequent options in the array.  For example:\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" options \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        group\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'Armament Options'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'weapon'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'w'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'string'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        group\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'General Options'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        names\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'help'\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'h'\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'bool'\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\"\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"Note: You can use an empty string, \"),s(\"code\",[this._v(\"{group: ''}\")]),this._v(\", to get a blank line in help\\noutput between groups of options.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"help-config\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#help-config\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Help config\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"The \"),s(\"code\",[this._v(\"parser.help(...)\")]),this._v(\" function is configurable as follows:\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",[s(\"code\",[this._v(\"    Options:\\n      Armament Options:\\n    ^^  -w WEAPON, --weapon=WEAPON  Weapon with which to crush. One of: |\\n   /                                sword, spear, maul                  |\\n  /   General Options:                                                  |\\n /      -h, --help                  Print this help and exit.           |\\n/   ^^^^                            ^                                   |\\n\\\\       `-- indent                   `-- helpCol              maxCol ---'\\n `-- headingIndent\\n\")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ul\",[n(\"li\",[n(\"code\",[t._v(\"indent\")]),t._v(\" (Number or String). Default 4. Set to a number (for that many\\nspaces) or a string for the literal indent.\")]),n(\"li\",[n(\"code\",[t._v(\"headingIndent\")]),t._v(\" (Number or String). Default half length of \"),n(\"code\",[t._v(\"indent\")]),t._v(\". Set to\\na number (for that many spaces) or a string for the literal indent. This\\nindent applies to group heading lines, between normal option lines.\")]),n(\"li\",[n(\"code\",[t._v(\"nameSort\")]),t._v(\" (String). Default is 'length'. By default the names are\\nsorted to put the short opts first (i.e. '-h, --help' preferred\\nto '--help, -h'). Set to 'none' to not do this sorting.\")]),n(\"li\",[n(\"code\",[t._v(\"maxCol\")]),t._v(\" (Number). Default 80. Note that reflow is just done on whitespace\\nso a long token in the option help can overflow maxCol.\")]),n(\"li\",[n(\"code\",[t._v(\"helpCol\")]),t._v(\" (Number). If not set a reasonable value will be determined\\nbetween \"),n(\"code\",[t._v(\"minHelpCol\")]),t._v(\" and \"),n(\"code\",[t._v(\"maxHelpCol\")]),t._v(\".\")]),n(\"li\",[n(\"code\",[t._v(\"minHelpCol\")]),t._v(\" (Number). Default 20.\")]),n(\"li\",[n(\"code\",[t._v(\"maxHelpCol\")]),t._v(\" (Number). Default 40.\")]),n(\"li\",[n(\"code\",[t._v(\"helpWrap\")]),t._v(\" (Boolean). Default true. Set to \"),n(\"code\",[t._v(\"false\")]),t._v(\" to have option \"),n(\"code\",[t._v(\"help\")]),t._v(\"\\nstrings \"),n(\"em\",[t._v(\"not\")]),t._v(\" be textwrapped to the helpCol..maxCol range.\")]),n(\"li\",[n(\"code\",[t._v(\"includeEnv\")]),t._v(\" (Boolean). Default false. If the option has associated\\nenvironment variables (via the \"),n(\"code\",[t._v(\"env\")]),t._v(\" option spec attribute), then\\nappend mentioned of those envvars to the help string.\")]),n(\"li\",[n(\"code\",[t._v(\"includeDefault\")]),t._v(\" (Boolean). Default false. If the option has a default value\\n(via the \"),n(\"code\",[t._v(\"default\")]),t._v(' option spec attribute, or a default on the option\\'s type),\\nthen a \"Default: VALUE\" string will be appended to the help string.')])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"custom-option-types\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#custom-option-types\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Custom option types\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",[s(\"code\",[this._v(\"var dashdash = require('dashdash');\\ndashdash.addOptionType({\\n    name: '...',\\n    takesArg: true,\\n    helpArg: '...',\\n    parseArg: function (option, optstr, arg) {\\n        ...\\n    },\\n    array: false,  // optional\\n    arrayFlatten: false,  // optional\\n    default: ...,   // optional\\n    completionType: ...  // optional\\n});\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"pre\",[s(\"code\",[this._v(\"var dashdash = require('dashdash');\\n\\nfunction parseYesNo(option, optstr, arg) {\\n    var argLower = arg.toLowerCase()\\n    if (~['yes', 'y'].indexOf(argLower)) {\\n        return true;\\n    } else if (~['no', 'n'].indexOf(argLower)) {\\n        return false;\\n    } else {\\n        throw new Error(format(\\n            'arg for \\\"%s\\\" is not \\\"yes\\\" or \\\"no\\\": \\\"%s\\\"',\\n            optstr, arg));\\n    }\\n}\\n\\ndashdash.addOptionType({\\n    name: 'yesno'\\n    takesArg: true,\\n    helpArg: '<yes|no>',\\n    parseArg: parseYesNo\\n});\\n\\nvar options = {\\n    {names: ['answer', 'a'], type: 'yesno'}\\n};\\nvar opts = dashdash.parse({options: options});\\n\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v('See \"examples/custom-option-*.js\" for other examples.\\nSee the '),s(\"code\",[this._v(\"addOptionType\")]),this._v(' block comment in \"lib/dashdash.js\" for more details.\\nPlease let me know '),s(\"a\",{attrs:{href:\"https://github.com/trentm/node-dashdash/issues/new\",target:\"_blank\",rel:\"noopener noreferrer\"}},[this._v(\"with an\\nissue\")]),this._v(\" if you write a\\ngenerally useful one.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"why\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#why\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Why\")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ul\",[n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"nopt\")]),t._v(\" really is just for \\\"tools like npm\\\". Implicit opts (e.g. '--no-foo'\\nworks for every '--foo'). Can't disable abbreviated opts. Can't do multiple\\nusages of same opt, e.g. '-vvv' (I think). Can't do grouped short opts.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"optimist\")]),t._v(\" has surprise interpretation of options (at least to me).\\nImplicit opts mean ambiguities and poor error handling for fat-fingering.\\n\"),n(\"code\",[t._v(\"process.exit\")]),t._v(\" calls makes it hard to use as a libary.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"optparse\")]),t._v(\" Incomplete docs. Is this an attempted clone of Python's \"),n(\"code\",[t._v(\"optparse\")]),t._v(\".\\nNot clear. Some divergence. \"),n(\"code\",[t._v('parser.on(\"name\", ...)')]),t._v(\" API is weird.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"argparse\")]),t._v(\" Dep on underscore. No thanks just for option processing.\\n\"),n(\"code\",[t._v(\"find lib | wc -l\")]),t._v(\" -> \"),n(\"code\",[t._v(\"26\")]),t._v(\". Overkill.\\nArgparse is a bit different anyway. Not sure I want that.\")])]),n(\"li\",[n(\"p\",[n(\"code\",[t._v(\"posix-getopt\")]),t._v(\" No type validation. Though that isn't a killer. AFAIK can't\\nhave a long opt without a short alias. I.e. no \"),n(\"code\",[t._v(\"getopt_long\")]),t._v(\" semantics.\\nAlso, no whizbang features like generated help output.\")])]),n(\"li\",[n(\"p\",[n(\"a\",{attrs:{href:\"https://github.com/visionmedia/commander.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v('\"commander.js\"')]),t._v(\": I wrote\\n\"),n(\"a\",{attrs:{href:\"http://trentm.com/2014/01/a-critique-of-commander-for-nodejs.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"a critique\")]),t._v(\"\\na while back. It seems fine, but last I checked had\\n\"),n(\"a\",{attrs:{href:\"https://github.com/visionmedia/commander.js/pull/121\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"an outstanding bug\")]),t._v(\"\\nthat would prevent me from using it.\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"license\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#license\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" License\")])}],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}