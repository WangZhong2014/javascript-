{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{372:function(e,t,a){\"use strict\";a.r(t);var i=a(0),n=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"streamroller\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#streamroller\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" streamroller\")]),a(\"p\",[e._v(\"node.js file streams that roll over when they reach a maximum size, or a date/time.\")]),a(\"pre\",[a(\"code\",[e._v(\"    npm install streamroller\\n\")])]),a(\"h2\",{attrs:{id:\"usage\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#usage\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" usage\")]),a(\"pre\",[a(\"code\",[e._v(\"    var rollers = require('streamroller');\\n    var stream = new rollers.RollingFileStream('myfile', 1024, 3);\\n    stream.write(\\\"stuff\\\");\\n    stream.end();\\n\")])]),a(\"p\",[e._v(\"The streams behave the same as standard node.js streams, except that when certain conditions are met they will rename the current file to a backup and start writing to a new file.\")]),a(\"h3\",{attrs:{id:\"new-rollingfilestream-filename-maxsize-numbackups-options\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#new-rollingfilestream-filename-maxsize-numbackups-options\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" new RollingFileStream(filename [, maxSize, numBackups, options])\")]),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"filename\")]),e._v(\" (String)\")]),a(\"li\",[a(\"code\",[e._v(\"maxSize\")]),e._v(\" - the size in bytes to trigger a rollover, if not provided this defaults to MAX_SAFE_INTEGER and the stream will not roll.\")]),a(\"li\",[a(\"code\",[e._v(\"numBackups\")]),e._v(\" - the number of old files to keep\")]),a(\"li\",[a(\"code\",[e._v(\"options\")]),e._v(\" - Object\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"encoding\")]),e._v(\" - defaults to 'utf8'\")]),a(\"li\",[a(\"code\",[e._v(\"mode\")]),e._v(\" - defaults to 0644\")]),a(\"li\",[a(\"code\",[e._v(\"flags\")]),e._v(\" - defaults to 'a'\")]),a(\"li\",[a(\"code\",[e._v(\"compress\")]),e._v(\" - (boolean) defaults to \"),a(\"code\",[e._v(\"false\")]),e._v(\" - compress the backup files using gzip (files will have \"),a(\"code\",[e._v(\".gz\")]),e._v(\" extension).\")]),a(\"li\",[a(\"code\",[e._v(\"keepFileExt\")]),e._v(\" - (boolean) defaults to \"),a(\"code\",[e._v(\"false\")]),e._v(\" - keep the file original extension. e.g.: \"),a(\"code\",[e._v(\"abc.log -> abc.1.log\")]),e._v(\".\")])])])]),a(\"p\",[e._v(\"This returns a \"),a(\"code\",[e._v(\"WritableStream\")]),e._v(\". When the current file being written to (given by \"),a(\"code\",[e._v(\"filename\")]),e._v(\") gets up to or larger than \"),a(\"code\",[e._v(\"maxSize\")]),e._v(\", then the current file will be renamed to \"),a(\"code\",[e._v(\"filename.1\")]),e._v(\" and a new file will start being written to. Up to \"),a(\"code\",[e._v(\"numBackups\")]),e._v(\" of old files are maintained, so if \"),a(\"code\",[e._v(\"numBackups\")]),e._v(\" is 3 then there will be 4 files:\\n\"),a(\"pre\",[e._v(\"filename\\nfilename.1\\nfilename.2\\nfilename.3\\n\")]),e._v(\"\\nWhen filename size >= maxSize then:\\n\"),a(\"pre\",[e._v(\"filename -> filename.1\\nfilename.1 -> filename.2\\nfilename.2 -> filename.3\\nfilename.3 gets overwritten\\nfilename is a new file\\n\")])]),a(\"h3\",{attrs:{id:\"new-daterollingfilestream-filename-pattern-options\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#new-daterollingfilestream-filename-pattern-options\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" new DateRollingFileStream(filename, pattern, options)\")]),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"filename\")]),e._v(\" (String)\")]),a(\"li\",[a(\"code\",[e._v(\"pattern\")]),e._v(\" (String) - the date pattern to trigger rolling (see below)\")]),a(\"li\",[a(\"code\",[e._v(\"options\")]),e._v(\" - Object\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"encoding\")]),e._v(\" - defaults to 'utf8'\")]),a(\"li\",[a(\"code\",[e._v(\"mode\")]),e._v(\" defaults to 0644\")]),a(\"li\",[a(\"code\",[e._v(\"flags\")]),e._v(\" defaults to 'a'\")]),a(\"li\",[a(\"code\",[e._v(\"compress\")]),e._v(\" - (boolean) compress the backup files, defaults to false\")]),a(\"li\",[a(\"code\",[e._v(\"keepFileExt\")]),e._v(\" - (boolean) defaults to \"),a(\"code\",[e._v(\"false\")]),e._v(\" - keep the file original extension. e.g.: \"),a(\"code\",[e._v(\"abc.log -> abc.2013-08-30.log\")]),e._v(\".\")]),a(\"li\",[a(\"code\",[e._v(\"alwaysIncludePattern\")]),e._v(\" - (boolean) extend the initial file with the pattern, defaults to false\")]),a(\"li\",[a(\"code\",[e._v(\"daysToKeep\")]),e._v(\" - (integer) if this is greater than 0, then files older than \"),a(\"code\",[e._v(\"daysToKeep\")]),e._v(\" days will be deleted during file rolling.\")])])])]),a(\"p\",[e._v(\"This returns a \"),a(\"code\",[e._v(\"WritableStream\")]),e._v(\". When the current time, formatted as \"),a(\"code\",[e._v(\"pattern\")]),e._v(\", changes then the current file will be renamed to \"),a(\"code\",[e._v(\"filename.formattedDate\")]),e._v(\" where \"),a(\"code\",[e._v(\"formattedDate\")]),e._v(\" is the result of processing the date through the pattern, and a new file will begin to be written. Streamroller uses \"),a(\"a\",{attrs:{href:\"http://github.com/nomiddlename/date-format\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"date-format\")]),e._v(\" to format dates, and the \"),a(\"code\",[e._v(\"pattern\")]),e._v(\" should use the date-format format. e.g. with a \"),a(\"code\",[e._v(\"pattern\")]),e._v(\" of \"),a(\"code\",[e._v('\".yyyy-MM-dd\"')]),e._v(\", and assuming today is August 29, 2013 then writing to the stream today will just write to \"),a(\"code\",[e._v(\"filename\")]),e._v(\". At midnight (or more precisely, at the next file write after midnight), \"),a(\"code\",[e._v(\"filename\")]),e._v(\" will be renamed to \"),a(\"code\",[e._v(\"filename.2013-08-29\")]),e._v(\" and a new \"),a(\"code\",[e._v(\"filename\")]),e._v(\" will be created. If \"),a(\"code\",[e._v(\"options.alwaysIncludePattern\")]),e._v(\" is true, then the initial file will be \"),a(\"code\",[e._v(\"filename.2013-08-29\")]),e._v(\" and no renaming will occur at midnight, but a new file will be written to with the name \"),a(\"code\",[e._v(\"filename.2013-08-30\")]),e._v(\".\")])])}],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}