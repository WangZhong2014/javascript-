{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{186:function(t,a,s){\"use strict\";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"div\",{staticClass:\"content\"},[s(\"h1\",{attrs:{id:\"libqp\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#libqp\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" libqp\")]),s(\"p\",[t._v(\"Encode and decode quoted-printable strings according to \"),s(\"a\",{attrs:{href:\"http://tools.ietf.org/html/rfc2045#section-6.7\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"RFC2045\")]),t._v(\".\")]),s(\"h2\",{attrs:{id:\"usage\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#usage\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Usage\")]),s(\"p\",[t._v(\"Install with npm\")]),s(\"pre\",[s(\"code\",[t._v(\"npm install libqp\\n\")])]),s(\"p\",[t._v(\"Require in your script\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" libqp \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'libqp'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),s(\"h3\",{attrs:{id:\"encode-values\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encode-values\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Encode values\")]),s(\"p\",[t._v(\"Encode Buffer objects or unicode strings with\")]),s(\"pre\",[s(\"code\",[t._v(\"libqp.encode(val) → String\\n\")])]),s(\"p\",[t._v(\"Where\")]),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"val\")]),t._v(\" is a Buffer or an unicode string\")])]),s(\"p\",[s(\"strong\",[t._v(\"Example\")])]),s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"libqp\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"encode\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'jõgeva'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// j=C3=B5geva\")]),t._v(\"\\n\")])]),s(\"h3\",{attrs:{id:\"wrap-encoded-values\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#wrap-encoded-values\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Wrap encoded values\")]),s(\"p\",[t._v(\"Quoted-Printable encoded lines are limited to 76 characters but \"),s(\"code\",[t._v(\"encode\")]),t._v(\" method might return lines longer than the limit.\")]),s(\"p\",[t._v(\"To enforce soft line breaks on lines longer than 76 (or any other length) characters, use \"),s(\"code\",[t._v(\"wrap\")])]),s(\"pre\",[s(\"code\",[t._v(\"libqp.wrap(str[, lineLength]) → String\\n\")])]),s(\"p\",[t._v(\"Where\")]),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"str\")]),t._v(\" is a Quoted-Printable encoded string\")]),s(\"li\",[s(\"strong\",[t._v(\"lineLength\")]),t._v(\" (defaults to 76) is the maximum allowed line length. Any longer line will be soft wrapped\")])]),s(\"p\",[s(\"strong\",[t._v(\"Example\")])]),s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"libqp\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"wrap\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'abc j=C3=B5geva'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"10\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// abc j=\\\\r\\\\n\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// =C3=B5geva\")]),t._v(\"\\n\")])]),s(\"h3\",{attrs:{id:\"transform-streams\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#transform-streams\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Transform Streams\")]),s(\"p\",[s(\"code\",[t._v(\"libqp\")]),t._v(\" makes it possible to encode and decode streams with \"),s(\"code\",[t._v(\"libqp.Encoder\")]),t._v(\" and \"),s(\"code\",[t._v(\"libqp.Decoder\")]),t._v(\" constructors.\")]),s(\"h3\",{attrs:{id:\"encoder-stream\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encoder-stream\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Encoder Stream\")]),s(\"p\",[t._v(\"Create new Encoder Stream with\")]),s(\"pre\",[s(\"code\",[t._v(\"var encoder = new libqp.Encoder([options])\\n\")])]),s(\"p\",[t._v(\"Where\")]),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"options\")]),t._v(\" is the optional stream options object with an additional option \"),s(\"code\",[t._v(\"lineLength\")]),t._v(\" if you want to use any other line length than the default 76 characters (or set to \"),s(\"code\",[t._v(\"false\")]),t._v(\" to turn the soft wrapping off completely)\")])]),s(\"p\",[s(\"strong\",[t._v(\"Example\")])]),s(\"p\",[t._v(\"The following example script reads in a file, encodes it to Quoted-Printable and saves the output to a file.\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" libqp \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'libqp'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fs \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'fs'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" source \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'source.txt'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" encoded \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'encoded.txt'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" encoder \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"libqp\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Encoder\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nsource\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"encoder\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"encoded\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),s(\"h3\",{attrs:{id:\"decoder-stream\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#decoder-stream\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Decoder Stream\")]),s(\"p\",[t._v(\"Create new Decoder Stream with\")]),s(\"pre\",[s(\"code\",[t._v(\"var decoder = new libqp.Decoder([options])\\n\")])]),s(\"p\",[t._v(\"Where\")]),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"options\")]),t._v(\" is the optional stream options object\")])]),s(\"p\",[s(\"strong\",[t._v(\"Example\")])]),s(\"p\",[t._v(\"The following example script reads in a file in Quoted-Printable encoding, decodes it and saves the output to a file.\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" libqp \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'libqp'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fs \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'fs'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" encoded \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'encoded.txt'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" dest \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'dest.txt'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" decoder \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"libqp\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Decoder\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nencoded\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"decoder\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"dest\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),s(\"h2\",{attrs:{id:\"license\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#license\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" License\")]),s(\"p\",[s(\"strong\",[t._v(\"MIT\")])])])}],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}