{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[355],{326:function(t,a,n){\"use strict\";n.r(a);var s=n(0),o=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n(\"div\",{staticClass:\"content\"},[n(\"h3\",{attrs:{id:\"_10-1\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-1\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 10.1\")]),n(\"p\",[t._v(\"type of obj:表示返回一个字符串，表示a的类型。\\n不过当obj是一个null时，typeof 也会返回一个object。\\n也就是说\\ntype of null === object // => true.\\n应该要排除null的情况。\")]),n(\"h3\",{attrs:{id:\"_10-2\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-2\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 10.2\")]),n(\"p\",[t._v(\"定义对象，有2种方法：\\n一是属性定义大法：\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v('var ojb = {\\n    name : \\'xiaoming\\',\\n    age: 18,\\n    isStudent: true\\n} // 属性定义大法\\n\\nvar obj2 = {\\n    \"name\": \\'xiaoming\\',\\n    \"age\": 18,\\n    \"isStudent\": true\\n} // 键值定义大法。\\n')])]),n(\"p\",[t._v(\"键值定义的结果和json对象格式一样，这两者有什么异同？\\n这道题本质上询问的是如何定义对象的属性名。\")]),n(\"ul\",[n(\"li\",[t._v(\"键值定义：是指属性名是需要带双引号的字符串。\")]),n(\"li\",[t._v(\"属性定义：属性名不需要带引号，相当于是对象的标志符。\")])]),n(\"p\",[t._v(\"这两者的区别还是蛮大的，主要由2部分的区别。\")]),n(\"h5\",{attrs:{id:\"命名上的区别\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#命名上的区别\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 命名上的区别\")]),n(\"p\",[t._v(\"键值定义的属性名，更灵活，也更宽泛，甚至可以出现有空格，或者不符合变量命名规则的字符串。\\n属性定义的属性名，是对象的标识符，必须符合js标识符的命名规则，不能出现空格，不能有连字符。在es5中，属性定义的属性名可以是js中的保留字，但在es3中不行。\")]),n(\"h5\",{attrs:{id:\"调用方法的区别\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#调用方法的区别\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 调用方法的区别\")]),n(\"p\",[t._v(\"用键值定义的属性名如何符合js的变量命名规则，那么通过(.)和通过[]来调用都是可以的。\\n不过通过[]来调用的属性，其内必须是一个字符串，或者是一个返回字符串的表达式，不能是一个标识符。\\n其次，通过键值定义的属性名，键是可以进行变化的，可以动态构建，访问时也可以动态构建键值。\")]),n(\"p\",[t._v(\"不论是键值定义，还是属性定义，都适用于值为函数的情况。\")]),n(\"h2\",{attrs:{id:\"_10-3对象的浅拷贝\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-3对象的浅拷贝\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 10.3对象的浅拷贝\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" obj \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"count\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"output\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"count \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" obj\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"count \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    console\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"count\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"output\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"obj\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"count\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"这两者是不一样的，如何保证函数体内的obj.count不影响外面obj.count的值。\")]),n(\"p\",[t._v(\"问题思考：\\n一开始我以为要考察的是作用域链，以及如何理解函数内部和函数体外部的参数的值，后来发现，是在考察关于对象的引用和拷贝。\")]),n(\"p\",[t._v(\"output()函数体内，形参是一个对象，这个对象的一个属性值count要加以。\")]),n(\"p\",[t._v(\"然后在倒数第二行，给这个形参传入了一个实参对象变量b。\\n但这里的实参b是直接指向了函数体外的对象b的地址，即函数体内的参数变量和作为参数的元对象是同一个。\\n并没有产生一个新的对象，因此函数外的对象的值也发生了改变。\\n并且，必须要在函数体内定义一个局部的obj对象，并赋值外部obj的值。\")]),n(\"h2\",{attrs:{id:\"_10-4\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-4\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 10.4\")]),n(\"h3\",{attrs:{id:\"题目\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#题目\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 题目\")]),n(\"p\",[t._v(\"var obj = {\\ncount: 1\\n}\")]),n(\"p\",[t._v(\"var myArray = ['red', 'white', 'black'];\\nconsole.log(myArray.length);\")]),n(\"p\",[t._v(\"myArray.obj = obj;\\nconsole.log(myArray.length);\\n两次打印myArray的length是多少？为什么？\")]),n(\"h3\",{attrs:{id:\"解答：\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#解答：\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 解答：\")]),n(\"p\",[t._v(\"以下的答案是错的：\")]),n(\"blockquote\",[n(\"p\",[t._v(\"我觉得理解的关键在于包装对象的特点和属性。\\nmyArray,是一个数组对象。\\n\"),n(\"code\",[t._v(\"myArray.obj = obj;\")]),t._v(\"这一句表达式实际上是让数组对象新增一个属性obj，然后令这个属性值等于1。这里的实现细节是先把myArray转换成一个对象，然后再销毁了。\")])]),n(\"p\",[n(\"strong\",[t._v(\"包装对象\")]),t._v(\"：包装对象是指在运行过程中，对字符串、数值和布尔值，为了实现其运算逻辑，而临时生成的对象。只局限在字符串、数值和布尔值这三种数据类型，而不包括数组和函数对象或其他复合对象。\")]),n(\"p\",[t._v(\"故而本题考查的是数组的元素和对象属性。\")])])}],!1,null,null,null);a.default=o.exports}}]);","extractedComments":[]}