{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[324],{230:function(t,a,s){\"use strict\";s.r(a);var e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"div\",{staticClass:\"content\"},[s(\"h1\",{attrs:{id:\"ansi-regex\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ansi-regex\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" ansi-regex \"),s(\"a\",{attrs:{href:\"https://travis-ci.org/chalk/ansi-regex\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s(\"img\",{attrs:{src:\"https://travis-ci.org/chalk/ansi-regex.svg?branch=master\",alt:\"Build Status\"}})])]),s(\"blockquote\",[s(\"p\",[t._v(\"Regular expression for matching \"),s(\"a\",{attrs:{href:\"http://en.wikipedia.org/wiki/ANSI_escape_code\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"ANSI escape codes\")])])]),s(\"h2\",{attrs:{id:\"install\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#install\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Install\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"$ npm install --save ansi-regex\\n\")])]),s(\"h2\",{attrs:{id:\"usage\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#usage\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Usage\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" ansiRegex \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'ansi-regex'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ansiRegex\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"test\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'\\\\u001b[4mcake\\\\u001b[0m'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//=> true\")]),t._v(\"\\n\\n\"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ansiRegex\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"test\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'cake'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//=> false\")]),t._v(\"\\n\\n\"),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'\\\\u001b[4mcake\\\\u001b[0m'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ansiRegex\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//=> ['\\\\u001b[4m', '\\\\u001b[0m']\")]),t._v(\"\\n\")])]),s(\"h2\",{attrs:{id:\"faq\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#faq\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" FAQ\")]),s(\"h3\",{attrs:{id:\"why-do-you-test-for-codes-not-in-the-ecma-48-standard\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#why-do-you-test-for-codes-not-in-the-ecma-48-standard\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Why do you test for codes not in the ECMA 48 standard?\")]),s(\"p\",[t._v(\"Some of the codes we run as a test are codes that we acquired finding various lists of non-standard or manufacturer specific codes. If I recall correctly, we test for both standard and non-standard codes, as most of them follow the same or similar format and can be safely matched in strings without the risk of removing actual string content. There are a few non-standard control codes that do not follow the traditional format (i.e. they end in numbers) thus forcing us to exclude them from the test because we cannot reliably match them.\")]),s(\"p\",[t._v(\"On the historical side, those ECMA standards were established in the early 90's whereas the VT100, for example, was designed in the mid/late 70's. At that point in time, control codes were still pretty ungoverned and engineers used them for a multitude of things, namely to activate hardware ports that may have been proprietary. Somewhere else you see a similar 'anarchy' of codes is in the x86 architecture for processors; there are a ton of \\\"interrupts\\\" that can mean different things on certain brands of processors, most of which have been phased out.\")]),s(\"h2\",{attrs:{id:\"license\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#license\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" License\")]),s(\"p\",[t._v(\"MIT Â© \"),s(\"a\",{attrs:{href:\"http://sindresorhus.com\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Sindre Sorhus\")])])])}],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}