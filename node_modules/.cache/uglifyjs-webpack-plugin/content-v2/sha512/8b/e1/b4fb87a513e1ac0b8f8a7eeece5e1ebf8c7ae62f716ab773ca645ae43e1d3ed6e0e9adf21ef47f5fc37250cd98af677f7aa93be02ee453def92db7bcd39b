{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{369:function(t,e,a){\"use strict\";a.r(e);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"sshpk\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sshpk\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" sshpk\")]),a(\"p\",[t._v(\"Parse, convert, fingerprint and use SSH keys (both public and private) in pure\\nnode -- no \"),a(\"code\",[t._v(\"ssh-keygen\")]),t._v(\" or other external dependencies.\")]),a(\"p\",[t._v(\"Supports RSA, DSA, ECDSA (nistp-*) and ED25519 key types, in PEM (PKCS#1,\\nPKCS#8) and OpenSSH formats.\")]),a(\"p\",[t._v(\"This library has been extracted from\\n\"),a(\"a\",{attrs:{href:\"https://github.com/joyent/node-http-signature\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a(\"code\",[t._v(\"node-http-signature\")])]),t._v(\"\\n(work by \"),a(\"a\",{attrs:{href:\"https://github.com/mcavage\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Mark Cavage\")]),t._v(\" and\\n\"),a(\"a\",{attrs:{href:\"https://github.com/bahamas10\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Dave Eddy\")]),t._v(\") and\\n\"),a(\"a\",{attrs:{href:\"https://github.com/bahamas10/node-ssh-fingerprint\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a(\"code\",[t._v(\"node-ssh-fingerprint\")])]),t._v(\"\\n(work by Dave Eddy), with additions (including ECDSA support) by\\n\"),a(\"a\",{attrs:{href:\"https://github.com/arekinath\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Alex Wilson\")]),t._v(\".\")]),a(\"h2\",{attrs:{id:\"install\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#install\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Install\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install sshpk\\n\")])]),a(\"h2\",{attrs:{id:\"examples\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#examples\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Examples\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" sshpk \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'sshpk'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fs \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'fs'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Read in an OpenSSH-format public key */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" keyPub \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"readFileSync\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'id_rsa.pub'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" key \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" sshpk\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parseKey\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"keyPub\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'ssh'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Get metadata about the key */\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'type => %s'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"type\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'size => %d bits'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"size\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'comment => %s'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"comment\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Compute key fingerprints, in new OpenSSH (>6.7) format, and old MD5 */\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'fingerprint => %s'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"fingerprint\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"toString\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'old-style fingerprint => %s'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"fingerprint\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'md5'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"toString\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"Example output:\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"type => rsa\\nsize => 2048 bits\\ncomment => foo@foo.com\\nfingerprint => SHA256:PYC9kPVC6J873CSIbfp0LwYeczP/W4ffObNCuDJ1u5w\\nold-style fingerprint => a0:c8:ad:6c:32:9a:32:fa:59:cc:a9:8c:0a:0d:6e:bd\\n\")])]),a(\"p\",[t._v(\"More examples: converting between formats:\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Read in a PEM public key */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" keyPem \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"readFileSync\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'id_rsa.pem'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" key \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" sshpk\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parseKey\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"keyPem\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'pem'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Convert to PEM PKCS#8 public key format */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" pemBuf \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"toBuffer\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'pkcs8'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Convert to SSH public key format (and return as a string) */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" sshKey \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"toString\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'ssh'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"Signing and verifying:\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Read in an OpenSSH/PEM *private* key */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" keyPriv \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"readFileSync\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'id_ecdsa'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" key \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" sshpk\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parsePrivateKey\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"keyPriv\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'pem'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" data \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'some data'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Sign some data with the key */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" s \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createSign\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'sha1'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\ns\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"update\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"data\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" signature \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" s\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"sign\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Now load the public key (could also use just key.toPublic()) */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" keyPub \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"readFileSync\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'id_ecdsa.pub'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nkey \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" sshpk\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parseKey\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"keyPub\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'ssh'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* Make a crypto.Verifier with this key */\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" v \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createVerify\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'sha1'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nv\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"update\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"data\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" valid \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" v\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"verify\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"signature\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* => true! */\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"Matching fingerprints with keys:\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fp \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" sshpk\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parseFingerprint\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'SHA256:PYC9kPVC6J873CSIbfp0LwYeczP/W4ffObNCuDJ1u5w'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" keys \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"sshpk\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parseKey\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"...\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" sshpk\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parseKey\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"...\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"...\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nkeys\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"forEach\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fp\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"matches\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"key\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\t\\tconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'found it!'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"h2\",{attrs:{id:\"usage\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#usage\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Usage\")]),a(\"h2\",{attrs:{id:\"public-keys\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#public-keys\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Public keys\")]),a(\"h3\",{attrs:{id:\"parsekey-data-format-auto-options\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parsekey-data-format-auto-options\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"parseKey(data[, format = 'auto'[, options]])\")])]),a(\"p\",[t._v(\"Parses a key from a given data format and returns a new \"),a(\"code\",[t._v(\"Key\")]),t._v(\" object.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"data\")]),t._v(\" -- Either a Buffer or String, containing the key\")]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- String name of format to use, valid options are:\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"auto\")]),t._v(\": choose automatically from all below\")]),a(\"li\",[a(\"code\",[t._v(\"pem\")]),t._v(\": supports both PKCS#1 and PKCS#8\")]),a(\"li\",[a(\"code\",[t._v(\"ssh\")]),t._v(\": standard OpenSSH format,\")]),a(\"li\",[a(\"code\",[t._v(\"pkcs1\")]),t._v(\", \"),a(\"code\",[t._v(\"pkcs8\")]),t._v(\": variants of \"),a(\"code\",[t._v(\"pem\")])]),a(\"li\",[a(\"code\",[t._v(\"rfc4253\")]),t._v(\": raw OpenSSH wire format\")]),a(\"li\",[a(\"code\",[t._v(\"openssh\")]),t._v(\": new post-OpenSSH 6.5 internal format, produced by\\n\"),a(\"code\",[t._v(\"ssh-keygen -o\")])])])]),a(\"li\",[a(\"code\",[t._v(\"options\")]),t._v(\" -- Optional Object, extra options, with keys:\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"filename\")]),t._v(\" -- Optional String, name for the key being parsed\\n(eg. the filename that was opened). Used to generate\\nError messages\")]),a(\"li\",[a(\"code\",[t._v(\"passphrase\")]),t._v(\" -- Optional String, encryption passphrase used to decrypt an\\nencrypted PEM file\")])])])]),a(\"h3\",{attrs:{id:\"key-iskey-obj\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-iskey-obj\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key.isKey(obj)\")])]),a(\"p\",[t._v(\"Returns \"),a(\"code\",[t._v(\"true\")]),t._v(\" if the given object is a valid \"),a(\"code\",[t._v(\"Key\")]),t._v(\" object created by a version\\nof \"),a(\"code\",[t._v(\"sshpk\")]),t._v(\" compatible with this one.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"obj\")]),t._v(\" -- Object to identify\")])]),a(\"h3\",{attrs:{id:\"key-type\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-type\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#type\")])]),a(\"p\",[t._v(\"String, the type of key. Valid options are \"),a(\"code\",[t._v(\"rsa\")]),t._v(\", \"),a(\"code\",[t._v(\"dsa\")]),t._v(\", \"),a(\"code\",[t._v(\"ecdsa\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"key-size\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-size\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#size\")])]),a(\"p\",[t._v('Integer, \"size\" of the key in bits. For RSA/DSA this is the size of the modulus;\\nfor ECDSA this is the bit size of the curve in use.')]),a(\"h3\",{attrs:{id:\"key-comment\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-comment\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#comment\")])]),a(\"p\",[t._v(\"Optional string, a key comment used by some formats (eg the \"),a(\"code\",[t._v(\"ssh\")]),t._v(\" format).\")]),a(\"h3\",{attrs:{id:\"key-curve\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-curve\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#curve\")])]),a(\"p\",[t._v(\"Only present if \"),a(\"code\",[t._v(\"this.type === 'ecdsa'\")]),t._v(\", string containing the name of the\\nnamed curve used with this key. Possible values include \"),a(\"code\",[t._v(\"nistp256\")]),t._v(\", \"),a(\"code\",[t._v(\"nistp384\")]),t._v(\"\\nand \"),a(\"code\",[t._v(\"nistp521\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"key-tobuffer-format-ssh\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-tobuffer-format-ssh\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#toBuffer([format = 'ssh'])\")])]),a(\"p\",[t._v(\"Convert the key into a given data format and return the serialized key as\\na Buffer.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- String name of format to use, for valid options see \"),a(\"code\",[t._v(\"parseKey()\")])])]),a(\"h3\",{attrs:{id:\"key-tostring-format-ssh\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-tostring-format-ssh\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#toString([format = 'ssh])\")])]),a(\"p\",[t._v(\"Same as \"),a(\"code\",[t._v(\"this.toBuffer(format).toString()\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"key-fingerprint-algorithm-sha256\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-fingerprint-algorithm-sha256\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#fingerprint([algorithm = 'sha256'])\")])]),a(\"p\",[t._v(\"Creates a new \"),a(\"code\",[t._v(\"Fingerprint\")]),t._v(\" object representing this Key's fingerprint.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"algorithm\")]),t._v(\" -- String name of hash algorithm to use, valid options are \"),a(\"code\",[t._v(\"md5\")]),t._v(\",\\n\"),a(\"code\",[t._v(\"sha1\")]),t._v(\", \"),a(\"code\",[t._v(\"sha256\")]),t._v(\", \"),a(\"code\",[t._v(\"sha384\")]),t._v(\", \"),a(\"code\",[t._v(\"sha512\")])])]),a(\"h3\",{attrs:{id:\"key-createverify-hashalgorithm\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-createverify-hashalgorithm\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#createVerify([hashAlgorithm])\")])]),a(\"p\",[t._v(\"Creates a \"),a(\"code\",[t._v(\"crypto.Verifier\")]),t._v(\" specialized to use this Key (and the correct public\\nkey algorithm to match it). The returned Verifier has the same API as a regular\\none, except that the \"),a(\"code\",[t._v(\"verify()\")]),t._v(\" function takes only the target signature as an\\nargument.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"hashAlgorithm\")]),t._v(\" -- optional String name of hash algorithm to use, any\\nsupported by OpenSSL are valid, usually including\\n\"),a(\"code\",[t._v(\"sha1\")]),t._v(\", \"),a(\"code\",[t._v(\"sha256\")]),t._v(\".\")])]),a(\"p\",[a(\"code\",[t._v(\"v.verify(signature[, format])\")]),t._v(\" Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"signature\")]),t._v(\" -- either a Signature object, or a Buffer or String\")]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- optional String, name of format to interpret given String with.\\nNot valid if \"),a(\"code\",[t._v(\"signature\")]),t._v(\" is a Signature or Buffer.\")])]),a(\"h3\",{attrs:{id:\"key-creatediffiehellman\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-creatediffiehellman\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#createDiffieHellman()\")])]),a(\"h3\",{attrs:{id:\"key-createdh\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key-createdh\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Key#createDH()\")])]),a(\"p\",[t._v(\"Creates a Diffie-Hellman key exchange object initialized with this key and all\\nnecessary parameters. This has the same API as a \"),a(\"code\",[t._v(\"crypto.DiffieHellman\")]),t._v(\"\\ninstance, except that functions take \"),a(\"code\",[t._v(\"Key\")]),t._v(\" and \"),a(\"code\",[t._v(\"PrivateKey\")]),t._v(\" objects as\\narguments, and return them where indicated for.\")]),a(\"p\",[t._v(\"This is only valid for keys belonging to a cryptosystem that supports DHE\\nor a close analogue (i.e. \"),a(\"code\",[t._v(\"dsa\")]),t._v(\", \"),a(\"code\",[t._v(\"ecdsa\")]),t._v(\" and \"),a(\"code\",[t._v(\"curve25519\")]),t._v(\" keys). An attempt\\nto call this function on other keys will yield an \"),a(\"code\",[t._v(\"Error\")]),t._v(\".\")]),a(\"h2\",{attrs:{id:\"private-keys\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#private-keys\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Private keys\")]),a(\"h3\",{attrs:{id:\"parseprivatekey-data-format-auto-options\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parseprivatekey-data-format-auto-options\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"parsePrivateKey(data[, format = 'auto'[, options]])\")])]),a(\"p\",[t._v(\"Parses a private key from a given data format and returns a new\\n\"),a(\"code\",[t._v(\"PrivateKey\")]),t._v(\" object.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"data\")]),t._v(\" -- Either a Buffer or String, containing the key\")]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- String name of format to use, valid options are:\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"auto\")]),t._v(\": choose automatically from all below\")]),a(\"li\",[a(\"code\",[t._v(\"pem\")]),t._v(\": supports both PKCS#1 and PKCS#8\")]),a(\"li\",[a(\"code\",[t._v(\"ssh\")]),t._v(\", \"),a(\"code\",[t._v(\"openssh\")]),t._v(\": new post-OpenSSH 6.5 internal format, produced by\\n\"),a(\"code\",[t._v(\"ssh-keygen -o\")])]),a(\"li\",[a(\"code\",[t._v(\"pkcs1\")]),t._v(\", \"),a(\"code\",[t._v(\"pkcs8\")]),t._v(\": variants of \"),a(\"code\",[t._v(\"pem\")])]),a(\"li\",[a(\"code\",[t._v(\"rfc4253\")]),t._v(\": raw OpenSSH wire format\")])])]),a(\"li\",[a(\"code\",[t._v(\"options\")]),t._v(\" -- Optional Object, extra options, with keys:\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"filename\")]),t._v(\" -- Optional String, name for the key being parsed\\n(eg. the filename that was opened). Used to generate\\nError messages\")]),a(\"li\",[a(\"code\",[t._v(\"passphrase\")]),t._v(\" -- Optional String, encryption passphrase used to decrypt an\\nencrypted PEM file\")])])])]),a(\"h3\",{attrs:{id:\"generateprivatekey-type-options\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generateprivatekey-type-options\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"generatePrivateKey(type[, options])\")])]),a(\"p\",[t._v(\"Generates a new private key of a certain key type, from random data.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"type\")]),t._v(\" -- String, type of key to generate. Currently supported are \"),a(\"code\",[t._v(\"'ecdsa'\")]),t._v(\"\\nand \"),a(\"code\",[t._v(\"'ed25519'\")])]),a(\"li\",[a(\"code\",[t._v(\"options\")]),t._v(\" -- optional Object, with keys:\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"curve\")]),t._v(\" -- optional String, for \"),a(\"code\",[t._v(\"'ecdsa'\")]),t._v(\" keys, specifies the curve to use.\\nIf ECDSA is specified and this option is not given, defaults to\\nusing \"),a(\"code\",[t._v(\"'nistp256'\")]),t._v(\".\")])])])]),a(\"h3\",{attrs:{id:\"privatekey-isprivatekey-obj\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-isprivatekey-obj\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey.isPrivateKey(obj)\")])]),a(\"p\",[t._v(\"Returns \"),a(\"code\",[t._v(\"true\")]),t._v(\" if the given object is a valid \"),a(\"code\",[t._v(\"PrivateKey\")]),t._v(\" object created by a\\nversion of \"),a(\"code\",[t._v(\"sshpk\")]),t._v(\" compatible with this one.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"obj\")]),t._v(\" -- Object to identify\")])]),a(\"h3\",{attrs:{id:\"privatekey-type\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-type\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#type\")])]),a(\"p\",[t._v(\"String, the type of key. Valid options are \"),a(\"code\",[t._v(\"rsa\")]),t._v(\", \"),a(\"code\",[t._v(\"dsa\")]),t._v(\", \"),a(\"code\",[t._v(\"ecdsa\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"privatekey-size\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-size\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#size\")])]),a(\"p\",[t._v('Integer, \"size\" of the key in bits. For RSA/DSA this is the size of the modulus;\\nfor ECDSA this is the bit size of the curve in use.')]),a(\"h3\",{attrs:{id:\"privatekey-curve\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-curve\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#curve\")])]),a(\"p\",[t._v(\"Only present if \"),a(\"code\",[t._v(\"this.type === 'ecdsa'\")]),t._v(\", string containing the name of the\\nnamed curve used with this key. Possible values include \"),a(\"code\",[t._v(\"nistp256\")]),t._v(\", \"),a(\"code\",[t._v(\"nistp384\")]),t._v(\"\\nand \"),a(\"code\",[t._v(\"nistp521\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"privatekey-tobuffer-format-pkcs1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-tobuffer-format-pkcs1\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#toBuffer([format = 'pkcs1'])\")])]),a(\"p\",[t._v(\"Convert the key into a given data format and return the serialized key as\\na Buffer.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- String name of format to use, valid options are listed under\\n\"),a(\"code\",[t._v(\"parsePrivateKey\")]),t._v(\". Note that ED25519 keys default to \"),a(\"code\",[t._v(\"openssh\")]),t._v(\"\\nformat instead (as they have no \"),a(\"code\",[t._v(\"pkcs1\")]),t._v(\" representation).\")])]),a(\"h3\",{attrs:{id:\"privatekey-tostring-format-pkcs1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-tostring-format-pkcs1\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#toString([format = 'pkcs1'])\")])]),a(\"p\",[t._v(\"Same as \"),a(\"code\",[t._v(\"this.toBuffer(format).toString()\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"privatekey-topublic\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-topublic\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#toPublic()\")])]),a(\"p\",[t._v(\"Extract just the public part of this private key, and return it as a \"),a(\"code\",[t._v(\"Key\")]),t._v(\"\\nobject.\")]),a(\"h3\",{attrs:{id:\"privatekey-fingerprint-algorithm-sha256\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-fingerprint-algorithm-sha256\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#fingerprint([algorithm = 'sha256'])\")])]),a(\"p\",[t._v(\"Same as \"),a(\"code\",[t._v(\"this.toPublic().fingerprint()\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"privatekey-createverify-hashalgorithm\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-createverify-hashalgorithm\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#createVerify([hashAlgorithm])\")])]),a(\"p\",[t._v(\"Same as \"),a(\"code\",[t._v(\"this.toPublic().createVerify()\")]),t._v(\".\")]),a(\"h3\",{attrs:{id:\"privatekey-createsign-hashalgorithm\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-createsign-hashalgorithm\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#createSign([hashAlgorithm])\")])]),a(\"p\",[t._v(\"Creates a \"),a(\"code\",[t._v(\"crypto.Sign\")]),t._v(\" specialized to use this PrivateKey (and the correct\\nkey algorithm to match it). The returned Signer has the same API as a regular\\none, except that the \"),a(\"code\",[t._v(\"sign()\")]),t._v(\" function takes no arguments, and returns a\\n\"),a(\"code\",[t._v(\"Signature\")]),t._v(\" object.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"hashAlgorithm\")]),t._v(\" -- optional String name of hash algorithm to use, any\\nsupported by OpenSSL are valid, usually including\\n\"),a(\"code\",[t._v(\"sha1\")]),t._v(\", \"),a(\"code\",[t._v(\"sha256\")]),t._v(\".\")])]),a(\"p\",[a(\"code\",[t._v(\"v.sign()\")]),t._v(\" Parameters\")]),a(\"ul\",[a(\"li\",[t._v(\"none\")])]),a(\"h3\",{attrs:{id:\"privatekey-derive-newtype\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#privatekey-derive-newtype\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"PrivateKey#derive(newType)\")])]),a(\"p\",[t._v(\"Derives a related key of type \"),a(\"code\",[t._v(\"newType\")]),t._v(\" from this key. Currently this is\\nonly supported to change between \"),a(\"code\",[t._v(\"ed25519\")]),t._v(\" and \"),a(\"code\",[t._v(\"curve25519\")]),t._v(\" keys which are\\nstored with the same private key (but usually distinct public keys in order\\nto avoid degenerate keys that lead to a weak Diffie-Hellman exchange).\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"newType\")]),t._v(\" -- String, type of key to derive, either \"),a(\"code\",[t._v(\"ed25519\")]),t._v(\" or \"),a(\"code\",[t._v(\"curve25519\")])])]),a(\"h2\",{attrs:{id:\"fingerprints\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fingerprints\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Fingerprints\")]),a(\"h3\",{attrs:{id:\"parsefingerprint-fingerprint-algorithms\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parsefingerprint-fingerprint-algorithms\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"parseFingerprint(fingerprint[, algorithms])\")])]),a(\"p\",[t._v(\"Pre-parses a fingerprint, creating a \"),a(\"code\",[t._v(\"Fingerprint\")]),t._v(\" object that can be used to\\nquickly locate a key by using the \"),a(\"code\",[t._v(\"Fingerprint#matches\")]),t._v(\" function.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"fingerprint\")]),t._v(\" -- String, the fingerprint value, in any supported format\")]),a(\"li\",[a(\"code\",[t._v(\"algorithms\")]),t._v(\" -- Optional list of strings, names of hash algorithms to limit\\nsupport to. If \"),a(\"code\",[t._v(\"fingerprint\")]),t._v(\" uses a hash algorithm not on\\nthis list, throws \"),a(\"code\",[t._v(\"InvalidAlgorithmError\")]),t._v(\".\")])]),a(\"h3\",{attrs:{id:\"fingerprint-isfingerprint-obj\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fingerprint-isfingerprint-obj\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Fingerprint.isFingerprint(obj)\")])]),a(\"p\",[t._v(\"Returns \"),a(\"code\",[t._v(\"true\")]),t._v(\" if the given object is a valid \"),a(\"code\",[t._v(\"Fingerprint\")]),t._v(\" object created by a\\nversion of \"),a(\"code\",[t._v(\"sshpk\")]),t._v(\" compatible with this one.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"obj\")]),t._v(\" -- Object to identify\")])]),a(\"h3\",{attrs:{id:\"fingerprint-tostring-format\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fingerprint-tostring-format\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Fingerprint#toString([format])\")])]),a(\"p\",[t._v(\"Returns a fingerprint as a string, in the given format.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- Optional String, format to use, valid options are \"),a(\"code\",[t._v(\"hex\")]),t._v(\" and\\n\"),a(\"code\",[t._v(\"base64\")]),t._v(\". If this \"),a(\"code\",[t._v(\"Fingerprint\")]),t._v(\" uses the \"),a(\"code\",[t._v(\"md5\")]),t._v(\" algorithm, the\\ndefault format is \"),a(\"code\",[t._v(\"hex\")]),t._v(\". Otherwise, the default is \"),a(\"code\",[t._v(\"base64\")]),t._v(\".\")])]),a(\"h3\",{attrs:{id:\"fingerprint-matches-key\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fingerprint-matches-key\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Fingerprint#matches(key)\")])]),a(\"p\",[t._v(\"Verifies whether or not this \"),a(\"code\",[t._v(\"Fingerprint\")]),t._v(\" matches a given \"),a(\"code\",[t._v(\"Key\")]),t._v(\". This function\\nuses double-hashing to avoid leaking timing information. Returns a boolean.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"key\")]),t._v(\" -- a \"),a(\"code\",[t._v(\"Key\")]),t._v(\" object, the key to match this fingerprint against\")])]),a(\"h2\",{attrs:{id:\"signatures\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#signatures\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Signatures\")]),a(\"h3\",{attrs:{id:\"parsesignature-signature-algorithm-format\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parsesignature-signature-algorithm-format\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"parseSignature(signature, algorithm, format)\")])]),a(\"p\",[t._v(\"Parses a signature in a given format, creating a \"),a(\"code\",[t._v(\"Signature\")]),t._v(\" object. Useful\\nfor converting between the SSH and ASN.1 (PKCS/OpenSSL) signature formats, and\\nalso returned as output from \"),a(\"code\",[t._v(\"PrivateKey#createSign().sign()\")]),t._v(\".\")]),a(\"p\",[t._v(\"A Signature object can also be passed to a verifier produced by\\n\"),a(\"code\",[t._v(\"Key#createVerify()\")]),t._v(\" and it will automatically be converted internally into the\\ncorrect format for verification.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"signature\")]),t._v(\" -- a Buffer (binary) or String (base64), data of the actual\\nsignature in the given format\")]),a(\"li\",[a(\"code\",[t._v(\"algorithm\")]),t._v(\" -- a String, name of the algorithm to be used, possible values\\nare \"),a(\"code\",[t._v(\"rsa\")]),t._v(\", \"),a(\"code\",[t._v(\"dsa\")]),t._v(\", \"),a(\"code\",[t._v(\"ecdsa\")])]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- a String, either \"),a(\"code\",[t._v(\"asn1\")]),t._v(\" or \"),a(\"code\",[t._v(\"ssh\")])])]),a(\"h3\",{attrs:{id:\"signature-issignature-obj\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#signature-issignature-obj\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Signature.isSignature(obj)\")])]),a(\"p\",[t._v(\"Returns \"),a(\"code\",[t._v(\"true\")]),t._v(\" if the given object is a valid \"),a(\"code\",[t._v(\"Signature\")]),t._v(\" object created by a\\nversion of \"),a(\"code\",[t._v(\"sshpk\")]),t._v(\" compatible with this one.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"obj\")]),t._v(\" -- Object to identify\")])]),a(\"h3\",{attrs:{id:\"signature-tobuffer-format-asn1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#signature-tobuffer-format-asn1\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Signature#toBuffer([format = 'asn1'])\")])]),a(\"p\",[t._v(\"Converts a Signature to the given format and returns it as a Buffer.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- a String, either \"),a(\"code\",[t._v(\"asn1\")]),t._v(\" or \"),a(\"code\",[t._v(\"ssh\")])])]),a(\"h3\",{attrs:{id:\"signature-tostring-format-asn1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#signature-tostring-format-asn1\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Signature#toString([format = 'asn1'])\")])]),a(\"p\",[t._v(\"Same as \"),a(\"code\",[t._v(\"this.toBuffer(format).toString('base64')\")]),t._v(\".\")]),a(\"h2\",{attrs:{id:\"certificates\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificates\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Certificates\")]),a(\"p\",[a(\"code\",[t._v(\"sshpk\")]),t._v(\" includes basic support for parsing certificates in X.509 (PEM) format\\nand the OpenSSH certificate format. This feature is intended to be used mainly\\nto access basic metadata about certificates, extract public keys from them, and\\nalso to generate simple self-signed certificates from an existing key.\")]),a(\"p\",[t._v(\"Notably, there is no implementation of CA chain-of-trust verification, and only\\nvery minimal support for key usage restrictions. Please do the security world\\na favour, and DO NOT use this code for certificate verification in the\\ntraditional X.509 CA chain style.\")]),a(\"h3\",{attrs:{id:\"parsecertificate-data-format\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parsecertificate-data-format\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"parseCertificate(data, format)\")])]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"data\")]),t._v(\" -- a Buffer or String\")]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- a String, format to use, one of \"),a(\"code\",[t._v(\"'openssh'\")]),t._v(\", \"),a(\"code\",[t._v(\"'pem'\")]),t._v(\" (X.509 in a\\nPEM wrapper), or \"),a(\"code\",[t._v(\"'x509'\")]),t._v(\" (raw DER encoded)\")])]),a(\"h3\",{attrs:{id:\"createselfsignedcertificate-subject-privatekey-options\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#createselfsignedcertificate-subject-privatekey-options\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"createSelfSignedCertificate(subject, privateKey[, options])\")])]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"subject\")]),t._v(\" -- an Identity, the subject of the certificate\")]),a(\"li\",[a(\"code\",[t._v(\"privateKey\")]),t._v(\" -- a PrivateKey, the key of the subject: will be used both to be\\nplaced in the certificate and also to sign it (since this is\\na self-signed certificate)\")]),a(\"li\",[a(\"code\",[t._v(\"options\")]),t._v(\" -- optional Object, with keys:\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"lifetime\")]),t._v(\" -- optional Number, lifetime of the certificate from now in\\nseconds\")]),a(\"li\",[a(\"code\",[t._v(\"validFrom\")]),t._v(\", \"),a(\"code\",[t._v(\"validUntil\")]),t._v(\" -- optional Dates, beginning and end of\\ncertificate validity period. If given\\n\"),a(\"code\",[t._v(\"lifetime\")]),t._v(\" will be ignored\")]),a(\"li\",[a(\"code\",[t._v(\"serial\")]),t._v(\" -- optional Buffer, the serial number of the certificate\")]),a(\"li\",[a(\"code\",[t._v(\"purposes\")]),t._v(\" -- optional Array of String, X.509 key usage restrictions\")])])])]),a(\"h3\",{attrs:{id:\"createcertificate-subject-key-issuer-issuerkey-options\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#createcertificate-subject-key-issuer-issuerkey-options\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"createCertificate(subject, key, issuer, issuerKey[, options])\")])]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"subject\")]),t._v(\" -- an Identity, the subject of the certificate\")]),a(\"li\",[a(\"code\",[t._v(\"key\")]),t._v(\" -- a Key, the public key of the subject\")]),a(\"li\",[a(\"code\",[t._v(\"issuer\")]),t._v(\" -- an Identity, the issuer of the certificate who will sign it\")]),a(\"li\",[a(\"code\",[t._v(\"issuerKey\")]),t._v(\" -- a PrivateKey, the issuer's private key for signing\")]),a(\"li\",[a(\"code\",[t._v(\"options\")]),t._v(\" -- optional Object, with keys:\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"lifetime\")]),t._v(\" -- optional Number, lifetime of the certificate from now in\\nseconds\")]),a(\"li\",[a(\"code\",[t._v(\"validFrom\")]),t._v(\", \"),a(\"code\",[t._v(\"validUntil\")]),t._v(\" -- optional Dates, beginning and end of\\ncertificate validity period. If given\\n\"),a(\"code\",[t._v(\"lifetime\")]),t._v(\" will be ignored\")]),a(\"li\",[a(\"code\",[t._v(\"serial\")]),t._v(\" -- optional Buffer, the serial number of the certificate\")]),a(\"li\",[a(\"code\",[t._v(\"purposes\")]),t._v(\" -- optional Array of String, X.509 key usage restrictions\")])])])]),a(\"h3\",{attrs:{id:\"certificate-subjects\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-subjects\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#subjects\")])]),a(\"p\",[t._v(\"Array of \"),a(\"code\",[t._v(\"Identity\")]),t._v(\" instances describing the subject of this certificate.\")]),a(\"h3\",{attrs:{id:\"certificate-issuer\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-issuer\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#issuer\")])]),a(\"p\",[t._v(\"The \"),a(\"code\",[t._v(\"Identity\")]),t._v(\" of the Certificate's issuer (signer).\")]),a(\"h3\",{attrs:{id:\"certificate-subjectkey\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-subjectkey\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#subjectKey\")])]),a(\"p\",[t._v(\"The public key of the subject of the certificate, as a \"),a(\"code\",[t._v(\"Key\")]),t._v(\" instance.\")]),a(\"h3\",{attrs:{id:\"certificate-issuerkey\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-issuerkey\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#issuerKey\")])]),a(\"p\",[t._v(\"The public key of the signing issuer of this certificate, as a \"),a(\"code\",[t._v(\"Key\")]),t._v(\" instance.\\nMay be \"),a(\"code\",[t._v(\"undefined\")]),t._v(\" if the issuer's key is unknown (e.g. on an X509 certificate).\")]),a(\"h3\",{attrs:{id:\"certificate-serial\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-serial\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#serial\")])]),a(\"p\",[t._v(\"The serial number of the certificate. As this is normally a 64-bit or wider\\ninteger, it is returned as a Buffer.\")]),a(\"h3\",{attrs:{id:\"certificate-purposes\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-purposes\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#purposes\")])]),a(\"p\",[t._v(\"Array of Strings indicating the X.509 key usage purposes that this certificate\\nis valid for. The possible strings at the moment are:\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"'signature'\")]),t._v(\" -- key can be used for digital signatures\")]),a(\"li\",[a(\"code\",[t._v(\"'identity'\")]),t._v(\" -- key can be used to attest about the identity of the signer\\n(X.509 calls this \"),a(\"code\",[t._v(\"nonRepudiation\")]),t._v(\")\")]),a(\"li\",[a(\"code\",[t._v(\"'codeSigning'\")]),t._v(\" -- key can be used to sign executable code\")]),a(\"li\",[a(\"code\",[t._v(\"'keyEncryption'\")]),t._v(\" -- key can be used to encrypt other keys\")]),a(\"li\",[a(\"code\",[t._v(\"'encryption'\")]),t._v(\" -- key can be used to encrypt data (only applies for RSA)\")]),a(\"li\",[a(\"code\",[t._v(\"'keyAgreement'\")]),t._v(\" -- key can be used for key exchange protocols such as\\nDiffie-Hellman\")]),a(\"li\",[a(\"code\",[t._v(\"'ca'\")]),t._v(\" -- key can be used to sign other certificates (is a Certificate\\nAuthority)\")]),a(\"li\",[a(\"code\",[t._v(\"'crl'\")]),t._v(\" -- key can be used to sign Certificate Revocation Lists (CRLs)\")])]),a(\"h3\",{attrs:{id:\"certificate-isexpired-when\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-isexpired-when\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#isExpired([when])\")])]),a(\"p\",[t._v(\"Tests whether the Certificate is currently expired (i.e. the \"),a(\"code\",[t._v(\"validFrom\")]),t._v(\" and\\n\"),a(\"code\",[t._v(\"validUntil\")]),t._v(\" dates specify a range of time that does not include the current\\ntime).\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"when\")]),t._v(\" -- optional Date, if specified, tests whether the Certificate was or\\nwill be expired at the specified time instead of now\")])]),a(\"p\",[t._v(\"Returns a Boolean.\")]),a(\"h3\",{attrs:{id:\"certificate-issignedbykey-key\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-issignedbykey-key\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#isSignedByKey(key)\")])]),a(\"p\",[t._v(\"Tests whether the Certificate was validly signed by the given (public) Key.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"key\")]),t._v(\" -- a Key instance\")])]),a(\"p\",[t._v(\"Returns a Boolean.\")]),a(\"h3\",{attrs:{id:\"certificate-issignedby-certificate\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-issignedby-certificate\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#isSignedBy(certificate)\")])]),a(\"p\",[t._v(\"Tests whether this Certificate was validly signed by the subject of the given\\ncertificate. Also tests that the issuer Identity of this Certificate and the\\nsubject Identity of the other Certificate are equivalent.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"certificate\")]),t._v(\" -- another Certificate instance\")])]),a(\"p\",[t._v(\"Returns a Boolean.\")]),a(\"h3\",{attrs:{id:\"certificate-fingerprint-hashalgo\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-fingerprint-hashalgo\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#fingerprint([hashAlgo])\")])]),a(\"p\",[t._v(\"Returns the X509-style fingerprint of the entire certificate (as a Fingerprint\\ninstance). This matches what a web-browser or similar would display as the\\ncertificate fingerprint and should not be confused with the fingerprint of the\\nsubject's public key.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"hashAlgo\")]),t._v(\" -- an optional String, any hash function name\")])]),a(\"h3\",{attrs:{id:\"certificate-tobuffer-format\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-tobuffer-format\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#toBuffer([format])\")])]),a(\"p\",[t._v(\"Serializes the Certificate to a Buffer and returns it.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- an optional String, output format, one of \"),a(\"code\",[t._v(\"'openssh'\")]),t._v(\", \"),a(\"code\",[t._v(\"'pem'\")]),t._v(\" or\\n\"),a(\"code\",[t._v(\"'x509'\")]),t._v(\". Defaults to \"),a(\"code\",[t._v(\"'x509'\")]),t._v(\".\")])]),a(\"p\",[t._v(\"Returns a Buffer.\")]),a(\"h3\",{attrs:{id:\"certificate-tostring-format\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-tostring-format\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Certificate#toString([format])\")])]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- an optional String, output format, one of \"),a(\"code\",[t._v(\"'openssh'\")]),t._v(\", \"),a(\"code\",[t._v(\"'pem'\")]),t._v(\" or\\n\"),a(\"code\",[t._v(\"'x509'\")]),t._v(\". Defaults to \"),a(\"code\",[t._v(\"'pem'\")]),t._v(\".\")])]),a(\"p\",[t._v(\"Returns a String.\")]),a(\"h2\",{attrs:{id:\"certificate-identities\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificate-identities\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Certificate identities\")]),a(\"h3\",{attrs:{id:\"identityforhost-hostname\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identityforhost-hostname\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"identityForHost(hostname)\")])]),a(\"p\",[t._v(\"Constructs a host-type Identity for a given hostname.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"hostname\")]),t._v(\" -- the fully qualified DNS name of the host\")])]),a(\"p\",[t._v(\"Returns an Identity instance.\")]),a(\"h3\",{attrs:{id:\"identityforuser-uid\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identityforuser-uid\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"identityForUser(uid)\")])]),a(\"p\",[t._v(\"Constructs a user-type Identity for a given UID.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"uid\")]),t._v(\" -- a String, user identifier (login name)\")])]),a(\"p\",[t._v(\"Returns an Identity instance.\")]),a(\"h3\",{attrs:{id:\"identityforemail-email\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identityforemail-email\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"identityForEmail(email)\")])]),a(\"p\",[t._v(\"Constructs an email-type Identity for a given email address.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"email\")]),t._v(\" -- a String, email address\")])]),a(\"p\",[t._v(\"Returns an Identity instance.\")]),a(\"h3\",{attrs:{id:\"identityfromdn-dn\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identityfromdn-dn\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"identityFromDN(dn)\")])]),a(\"p\",[t._v(\"Parses an LDAP-style DN string (e.g. \"),a(\"code\",[t._v(\"'CN=foo, C=US'\")]),t._v(\") and turns it into an\\nIdentity instance.\")]),a(\"p\",[t._v(\"Parameters\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"dn\")]),t._v(\" -- a String\")])]),a(\"p\",[t._v(\"Returns an Identity instance.\")]),a(\"h3\",{attrs:{id:\"identity-tostring\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identity-tostring\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Identity#toString()\")])]),a(\"p\",[t._v(\"Returns the identity as an LDAP-style DN string.\\ne.g. \"),a(\"code\",[t._v(\"'CN=foo, O=bar corp, C=us'\")])]),a(\"h3\",{attrs:{id:\"identity-type\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identity-type\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Identity#type\")])]),a(\"p\",[t._v(\"The type of identity. One of \"),a(\"code\",[t._v(\"'host'\")]),t._v(\", \"),a(\"code\",[t._v(\"'user'\")]),t._v(\", \"),a(\"code\",[t._v(\"'email'\")]),t._v(\" or \"),a(\"code\",[t._v(\"'unknown'\")])]),a(\"h3\",{attrs:{id:\"identity-hostname\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identity-hostname\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Identity#hostname\")])]),a(\"h3\",{attrs:{id:\"identity-uid\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identity-uid\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Identity#uid\")])]),a(\"h3\",{attrs:{id:\"identity-email\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identity-email\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Identity#email\")])]),a(\"p\",[t._v(\"Set when \"),a(\"code\",[t._v(\"type\")]),t._v(\" is \"),a(\"code\",[t._v(\"'host'\")]),t._v(\", \"),a(\"code\",[t._v(\"'user'\")]),t._v(\", or \"),a(\"code\",[t._v(\"'email'\")]),t._v(\", respectively. Strings.\")]),a(\"h3\",{attrs:{id:\"identity-cn\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#identity-cn\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"Identity#cn\")])]),a(\"p\",[t._v(\"The value of the first \"),a(\"code\",[t._v(\"CN=\")]),t._v(\" in the DN, if any.\")]),a(\"h2\",{attrs:{id:\"errors\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#errors\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Errors\")]),a(\"h3\",{attrs:{id:\"invalidalgorithmerror\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#invalidalgorithmerror\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"InvalidAlgorithmError\")])]),a(\"p\",[t._v(\"The specified algorithm is not valid, either because it is not supported, or\\nbecause it was not included on a list of allowed algorithms.\")]),a(\"p\",[t._v(\"Thrown by \"),a(\"code\",[t._v(\"Fingerprint.parse\")]),t._v(\", \"),a(\"code\",[t._v(\"Key#fingerprint\")]),t._v(\".\")]),a(\"p\",[t._v(\"Properties\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"algorithm\")]),t._v(\" -- the algorithm that could not be validated\")])]),a(\"h3\",{attrs:{id:\"fingerprintformaterror\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fingerprintformaterror\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"FingerprintFormatError\")])]),a(\"p\",[t._v(\"The fingerprint string given could not be parsed as a supported fingerprint\\nformat, or the specified fingerprint format is invalid.\")]),a(\"p\",[t._v(\"Thrown by \"),a(\"code\",[t._v(\"Fingerprint.parse\")]),t._v(\", \"),a(\"code\",[t._v(\"Fingerprint#toString\")]),t._v(\".\")]),a(\"p\",[t._v(\"Properties\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"fingerprint\")]),t._v(\" -- if caused by a fingerprint, the string value given\")]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- if caused by an invalid format specification, the string value given\")])]),a(\"h3\",{attrs:{id:\"keyparseerror\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#keyparseerror\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"KeyParseError\")])]),a(\"p\",[t._v(\"The key data given could not be parsed as a valid key.\")]),a(\"p\",[t._v(\"Properties\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"keyName\")]),t._v(\" -- \"),a(\"code\",[t._v(\"filename\")]),t._v(\" that was given to \"),a(\"code\",[t._v(\"parseKey\")])]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- the \"),a(\"code\",[t._v(\"format\")]),t._v(\" that was trying to parse the key (see \"),a(\"code\",[t._v(\"parseKey\")]),t._v(\")\")]),a(\"li\",[a(\"code\",[t._v(\"innerErr\")]),t._v(\" -- the inner Error thrown by the format parser\")])]),a(\"h3\",{attrs:{id:\"keyencryptederror\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#keyencryptederror\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"KeyEncryptedError\")])]),a(\"p\",[t._v(\"The key is encrypted with a symmetric key (ie, it is password protected). The\\nparsing operation would succeed if it was given the \"),a(\"code\",[t._v(\"passphrase\")]),t._v(\" option.\")]),a(\"p\",[t._v(\"Properties\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"keyName\")]),t._v(\" -- \"),a(\"code\",[t._v(\"filename\")]),t._v(\" that was given to \"),a(\"code\",[t._v(\"parseKey\")])]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- the \"),a(\"code\",[t._v(\"format\")]),t._v(\" that was trying to parse the key (currently can only\\nbe \"),a(\"code\",[t._v('\"pem\"')]),t._v(\")\")])]),a(\"h3\",{attrs:{id:\"certificateparseerror\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#certificateparseerror\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),a(\"code\",[t._v(\"CertificateParseError\")])]),a(\"p\",[t._v(\"The certificate data given could not be parsed as a valid certificate.\")]),a(\"p\",[t._v(\"Properties\")]),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"certName\")]),t._v(\" -- \"),a(\"code\",[t._v(\"filename\")]),t._v(\" that was given to \"),a(\"code\",[t._v(\"parseCertificate\")])]),a(\"li\",[a(\"code\",[t._v(\"format\")]),t._v(\" -- the \"),a(\"code\",[t._v(\"format\")]),t._v(\" that was trying to parse the key\\n(see \"),a(\"code\",[t._v(\"parseCertificate\")]),t._v(\")\")]),a(\"li\",[a(\"code\",[t._v(\"innerErr\")]),t._v(\" -- the inner Error thrown by the format parser\")])]),a(\"h2\",{attrs:{id:\"friends-of-sshpk\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#friends-of-sshpk\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Friends of sshpk\")]),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/arekinath/node-sshpk-agent\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a(\"code\",[t._v(\"sshpk-agent\")])]),t._v(\" is a library\\nfor speaking the \"),a(\"code\",[t._v(\"ssh-agent\")]),t._v(\" protocol from node.js, which uses \"),a(\"code\",[t._v(\"sshpk\")])])])])}],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}