{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{178:function(t,s,a){\"use strict\";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"libbase64\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#libbase64\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" libbase64\")]),a(\"p\",[t._v(\"Encode and decode base64 strings.\")]),a(\"h2\",{attrs:{id:\"usage\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#usage\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Usage\")]),a(\"p\",[t._v(\"Install with npm\")]),a(\"pre\",[a(\"code\",[t._v(\"npm install libbase64\\n\")])]),a(\"p\",[t._v(\"Require in your script\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" libbase64 \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'libbase64'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"h3\",{attrs:{id:\"encode-values\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encode-values\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Encode values\")]),a(\"p\",[t._v(\"Encode Buffer objects or unicode strings with\")]),a(\"pre\",[a(\"code\",[t._v(\"libbase64.encode(val) → String\\n\")])]),a(\"p\",[t._v(\"Where\")]),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"val\")]),t._v(\" is a Buffer or an unicode string\")])]),a(\"p\",[a(\"strong\",[t._v(\"Example\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[t._v(\"libbase64\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"encode\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'jõgeva'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// asO1Z2V2YQ==\")]),t._v(\"\\n\")])]),a(\"h3\",{attrs:{id:\"wrap-encoded-values\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#wrap-encoded-values\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Wrap encoded values\")]),a(\"p\",[t._v(\"To enforce soft line breaks on lines longer than selected amount of characters, use \"),a(\"code\",[t._v(\"wrap\")])]),a(\"pre\",[a(\"code\",[t._v(\"libbase64.wrap(str[, lineLength]) → String\\n\")])]),a(\"p\",[t._v(\"Where\")]),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"str\")]),t._v(\" is a base64 encoded string\")]),a(\"li\",[a(\"strong\",[t._v(\"lineLength\")]),t._v(\" (defaults to 76) is the maximum allowed line length\")])]),a(\"p\",[a(\"strong\",[t._v(\"Example\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[t._v(\"libbase64\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"wrap\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'asO1Z2V2asO1Z2V2asO1Z2V2YQ=='\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"10\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// asO1Z2V2as\\\\r\\\\n\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// O1Z2V2asO1\\\\r\\\\n\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Z2V2YQ==\")]),t._v(\"\\n\")])]),a(\"h3\",{attrs:{id:\"transform-streams\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#transform-streams\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Transform Streams\")]),a(\"p\",[a(\"code\",[t._v(\"libbase64\")]),t._v(\" makes it possible to encode and decode streams with \"),a(\"code\",[t._v(\"libbase64.Encoder\")]),t._v(\" and \"),a(\"code\",[t._v(\"libbase64.Decoder\")]),t._v(\" constructors.\")]),a(\"h3\",{attrs:{id:\"encoder-stream\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encoder-stream\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Encoder Stream\")]),a(\"p\",[t._v(\"Create new Encoder Stream with\")]),a(\"pre\",[a(\"code\",[t._v(\"var encoder = new libbase64.Encoder([options])\\n\")])]),a(\"p\",[t._v(\"Where\")]),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"options\")]),t._v(\" is the optional stream options object with an additional option \"),a(\"code\",[t._v(\"lineLength\")]),t._v(\" if you want to use any other line length than the default 76 characters (or set to \"),a(\"code\",[t._v(\"false\")]),t._v(\" to turn the soft wrapping off completely)\")])]),a(\"p\",[a(\"strong\",[t._v(\"Example\")])]),a(\"p\",[t._v(\"The following example script reads in a file, encodes it to base64 and saves the output to a file.\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" libbase64 \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'libbase64'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fs \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'fs'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" source \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'source.txt'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" encoded \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'encoded.txt'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" encoder \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"libbase64\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Encoder\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nsource\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"encoder\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"encoded\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"h3\",{attrs:{id:\"decoder-stream\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#decoder-stream\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Decoder Stream\")]),a(\"p\",[t._v(\"Create new Decoder Stream with\")]),a(\"pre\",[a(\"code\",[t._v(\"var decoder = new libbase64.Decoder([options])\\n\")])]),a(\"p\",[t._v(\"Where\")]),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"options\")]),t._v(\" is the optional stream options object\")])]),a(\"p\",[a(\"strong\",[t._v(\"Example\")])]),a(\"p\",[t._v(\"The following example script reads in a file in base64 encoding, decodes it and saves the output to a file.\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" libbase64 \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'libbase64'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fs \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'fs'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" encoded \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'encoded.txt'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" dest \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fs\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"createReadStream\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'dest.txt'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" decoder \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"libbase64\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Decoder\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nencoded\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"decoder\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pipe\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"dest\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"h2\",{attrs:{id:\"license\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#license\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" License\")]),a(\"p\",[a(\"strong\",[t._v(\"MIT\")])])])}],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}