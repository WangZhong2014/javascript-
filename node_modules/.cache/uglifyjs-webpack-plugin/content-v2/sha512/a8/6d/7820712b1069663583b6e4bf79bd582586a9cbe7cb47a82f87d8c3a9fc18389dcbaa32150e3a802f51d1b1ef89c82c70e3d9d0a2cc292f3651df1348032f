{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{181:function(e,t,a){\"use strict\";a.r(t);var r=a(0),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"libmime\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#libmime\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" libmime\")]),a(\"p\",[a(\"code\",[e._v(\"libmime\")]),e._v(\" provides useful MIME related functions. For Quoted-Printable and Base64 encoding and decoding see \"),a(\"a\",{attrs:{href:\"https://github.com/andris9/libqp\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"libqp\")]),e._v(\" and \"),a(\"a\",{attrs:{href:\"https://github.com/andris9/libabase64\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"libbase64\")]),e._v(\".\")]),a(\"h2\",{attrs:{id:\"installation\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#installation\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Installation\")]),a(\"h3\",{attrs:{id:\"npm\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#npm\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),a(\"a\",{attrs:{href:\"https://www.npmjs.org/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"npm\")]),e._v(\":\")]),a(\"pre\",[a(\"code\",[e._v(\"npm install libmime\\n\")])]),a(\"h2\",{attrs:{id:\"usage\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#usage\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Usage\")]),a(\"pre\",[a(\"code\",[e._v(\"var libmime = require('libmime');\\n\")])]),a(\"h2\",{attrs:{id:\"methods\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#methods\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Methods\")]),a(\"h3\",{attrs:{id:\"encoded-words\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encoded-words\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Encoded Words\")]),a(\"h4\",{attrs:{id:\"encodeword\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encodeword\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #encodeWord\")]),a(\"p\",[e._v(\"Encodes a string into mime \"),a(\"a\",{attrs:{href:\"http://en.wikipedia.org/wiki/MIME#Encoded-Word\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"encoded word\")]),e._v(\" format.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.encodeWord(str [, mimeWordEncoding[, maxLength]]) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" - String or Buffer to be encoded\")]),a(\"li\",[a(\"strong\",[e._v(\"mimeWordEncoding\")]),e._v(\" - Encoding for the mime word, either Q or B (default is 'Q')\")]),a(\"li\",[a(\"strong\",[e._v(\"maxLength\")]),e._v(\" - If set, split mime words into several chunks if needed\")])]),a(\"p\",[a(\"strong\",[e._v(\"Example\")])]),a(\"pre\",[a(\"code\",[e._v(\"libmime.encodeWord('See on õhin test', 'Q');\\n\")])]),a(\"p\",[e._v(\"Becomes with UTF-8 and Quoted-printable encoding\")]),a(\"pre\",[a(\"code\",[e._v(\"=?UTF-8?Q?See_on_=C3=B5hin_test?=\\n\")])]),a(\"h4\",{attrs:{id:\"decodeword\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#decodeword\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #decodeWord\")]),a(\"p\",[e._v(\"Decodes a string from mime encoded word format.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.decodeWord(str) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" - String to be decoded\")])]),a(\"p\",[a(\"strong\",[e._v(\"Example\")])]),a(\"pre\",[a(\"code\",[e._v(\"libmime.decodeWord('=?UTF-8?Q?See_on_=C3=B5hin_test?=');\\n\")])]),a(\"p\",[e._v(\"will become\")]),a(\"pre\",[a(\"code\",[e._v(\"See on õhin test\\n\")])]),a(\"h4\",{attrs:{id:\"encodewords\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encodewords\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #encodeWords\")]),a(\"p\",[e._v(\"Encodes non ascii sequences in a string to mime words.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.encodeWords(str[, mimeWordEncoding[, maxLength]) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" - String or Buffer to be encoded\")]),a(\"li\",[a(\"strong\",[e._v(\"mimeWordEncoding\")]),e._v(\" - Encoding for the mime word, either Q or B (default is 'Q')\")]),a(\"li\",[a(\"strong\",[e._v(\"maxLength\")]),e._v(\" - If set, split mime words into several chunks if needed\")])]),a(\"h4\",{attrs:{id:\"decodewords\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#decodewords\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #decodeWords\")]),a(\"p\",[e._v(\"Decodes a string that might include one or several mime words. If no mime words are found from the string, the original string is returned\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.decodeWords(str) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" - String to be decoded\")])]),a(\"h3\",{attrs:{id:\"folding\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#folding\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Folding\")]),a(\"h4\",{attrs:{id:\"foldlines\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#foldlines\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #foldLines\")]),a(\"p\",[e._v(\"Folds a long line according to the \"),a(\"a\",{attrs:{href:\"http://tools.ietf.org/html/rfc5322#section-2.1.1\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"RFC 5322\")]),e._v(\". Mostly needed for folding header lines.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.foldLines(str [, lineLength[, afterSpace]]) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" - String to be folded\")]),a(\"li\",[a(\"strong\",[e._v(\"lineLength\")]),e._v(\" - Maximum length of a line (defaults to 76)\")]),a(\"li\",[a(\"strong\",[e._v(\"afterSpace\")]),e._v(\" - If true, leave a space in the end of a line\")])]),a(\"p\",[a(\"strong\",[e._v(\"Example\")])]),a(\"pre\",[a(\"code\",[e._v(\"libmime.foldLines('Content-Type: multipart/alternative; boundary=\\\"----zzzz----\\\"')\\n\")])]),a(\"p\",[e._v(\"results in\")]),a(\"pre\",[a(\"code\",[e._v('Content-Type: multipart/alternative;\\n     boundary=\"----zzzz----\"\\n')])]),a(\"h4\",{attrs:{id:\"encodeflowed\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encodeflowed\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #encodeFlowed\")]),a(\"p\",[e._v(\"Adds soft line breaks to content marked with \"),a(\"code\",[e._v(\"format=flowed\")]),e._v(\" options to ensure that no line in the message is never longer than lineLength.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.encodeFlowed(str [, lineLength]) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" Plaintext string that requires wrapping\")]),a(\"li\",[a(\"strong\",[e._v(\"lineLength\")]),e._v(\" (defaults to 76) Maximum length of a line\")])]),a(\"h4\",{attrs:{id:\"decodeflowed\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#decodeflowed\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #decodeFlowed\")]),a(\"p\",[e._v(\"Unwraps a plaintext string in format=flowed wrapping.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.decodeFlowed(str [, delSp]) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" Plaintext string with format=flowed to decode\")]),a(\"li\",[a(\"strong\",[e._v(\"delSp\")]),e._v(\" If true, delete leading spaces (delsp=yes)\")])]),a(\"h3\",{attrs:{id:\"headers\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#headers\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Headers\")]),a(\"h4\",{attrs:{id:\"decodeheader\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#decodeheader\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #decodeHeader\")]),a(\"p\",[e._v(\"Unfolds a header line and splits it to key and value pair. The return value is in the form of \"),a(\"code\",[e._v(\"{key: 'subject', value: 'test'}\")]),e._v(\". The value is not mime word decoded, you need to do your own decoding based on the rules for the specific header key.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.decodeHeader(headerLine) → Object\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"headerLine\")]),e._v(\" - Single header line, might include linebreaks as well if folded\")])]),a(\"h4\",{attrs:{id:\"decodeheaders\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#decodeheaders\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #decodeHeaders\")]),a(\"p\",[e._v(\"Parses a block of header lines. Does not decode mime words as every header might have its own rules (eg. formatted email addresses and such).\")]),a(\"p\",[e._v(\"Return value is an object of headers, where header keys are object keys and values are arrays.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.decodeHeaders(headers) → Object\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"headers\")]),e._v(\" - Headers string\")])]),a(\"h4\",{attrs:{id:\"parseheadervalue\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parseheadervalue\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #parseHeaderValue\")]),a(\"p\",[e._v(\"Parses a header value with \"),a(\"code\",[e._v(\"key=value\")]),e._v(\" arguments into a structured object. Useful when dealing with\\n\"),a(\"code\",[e._v(\"content-type\")]),e._v(\" and such. Continuation encoded params are joined into mime encoded words.\")]),a(\"pre\",[a(\"code\",[e._v(\"parseHeaderValue(valueString) → Object\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"valueString\")]),e._v(\" - a header value without the key\")])]),a(\"p\",[a(\"strong\",[e._v(\"Example\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token function\"}},[e._v(\"parseHeaderValue\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[e._v(\"'content-type: text/plain; CHARSET=\\\"UTF-8\\\"'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\n\")])]),a(\"p\",[e._v(\"Outputs\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-json\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token property\"}},[e._v('\"value\"')]),a(\"span\",{attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[e._v('\"text/plain\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token property\"}},[e._v('\"params\"')]),a(\"span\",{attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token property\"}},[e._v('\"charset\"')]),a(\"span\",{attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[e._v('\"UTF-8\"')]),e._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),e._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),e._v(\"\\n\")])]),a(\"h4\",{attrs:{id:\"buildheadervalue\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#buildheadervalue\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #buildHeaderValue\")]),a(\"p\",[e._v(\"Joins structured header value together as 'value; param1=value1; param2=value2'\")]),a(\"pre\",[a(\"code\",[e._v(\"buildHeaderValue(structuredHeader) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"structuredHeader\")]),e._v(\" - a header value formatted with \"),a(\"code\",[e._v(\"parseHeaderValue\")])])]),a(\"p\",[a(\"code\",[e._v(\"filename\")]),e._v(\" argument is encoded with continuation encoding if needed\")]),a(\"h4\",{attrs:{id:\"buildheaderparam\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#buildheaderparam\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #buildHeaderParam\")]),a(\"p\",[e._v(\"Encodes and splits a header param value according to \"),a(\"a\",{attrs:{href:\"https://tools.ietf.org/html/rfc2231#section-3\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"RFC2231\")]),e._v(\" Parameter Value Continuations.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.buildHeaderParam(key, str, maxLength) → Array\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"key\")]),e._v(\" - Parameter key (eg. \"),a(\"code\",[e._v(\"filename\")]),e._v(\")\")]),a(\"li\",[a(\"strong\",[e._v(\"str\")]),e._v(\" - String or an Buffer value to encode\")]),a(\"li\",[a(\"strong\",[e._v(\"maxLength\")]),e._v(\" - Maximum length of the encoded string part (not line length). Defaults to 50\")])]),a(\"p\",[e._v(\"The method returns an array of encoded parts with the following structure: \"),a(\"code\",[e._v(\"[{key:'...', value: '...'}]\")])]),a(\"p\",[a(\"strong\",[e._v(\"Example\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"libmime.buildHeaderParam('filename', 'filename õäöü.txt', 20);\\n→\\n[ { key: 'filename*0*', value: 'utf-8\\\\'\\\\'filename%20' },\\n  { key: 'filename*1*', value: '%C3%B5%C3%A4%C3%B6' },\\n  { key: 'filename*2*', value: '%C3%BC.txt' } ]\\n\")])]),a(\"p\",[e._v(\"This can be combined into a properly formatted header:\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Content-disposition: attachment; filename*0*=utf-8''filename%20\\n  filename*1*=%C3%B5%C3%A4%C3%B6; filename*2*=%C3%BC.txt\\n\")])]),a(\"h3\",{attrs:{id:\"mime-types\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mime-types\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" MIME Types\")]),a(\"h4\",{attrs:{id:\"detectextension\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#detectextension\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #detectExtension\")]),a(\"p\",[e._v(\"Returns file extension for a content type string. If no suitable extensions are found, 'bin' is used as the default extension.\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.detectExtension(mimeType) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"mimeType\")]),e._v(\" - Content type to be checked for\")])]),a(\"p\",[a(\"strong\",[e._v(\"Example\")])]),a(\"pre\",[a(\"code\",[e._v(\"libmime.detectExtension('image/jpeg') // returns 'jpeg'\\n\")])]),a(\"h4\",{attrs:{id:\"detectmimetype\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#detectmimetype\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" #detectMimeType\")]),a(\"p\",[e._v(\"Returns content type for a file extension. If no suitable content types are found, 'application/octet-stream' is used as the default content type\")]),a(\"pre\",[a(\"code\",[e._v(\"libmime.detectMimeType(extension) → String\\n\")])]),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"extension\")]),e._v(\" Extension (or filename) to be checked for\")])]),a(\"p\",[a(\"strong\",[e._v(\"Example\")])]),a(\"pre\",[a(\"code\",[e._v(\"libmime.detectExtension('logo.jpg') // returns 'image/jpeg'\\n\")])]),a(\"h2\",{attrs:{id:\"license\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#license\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" License\")]),a(\"p\",[a(\"strong\",[e._v(\"MIT\")])])])}],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}