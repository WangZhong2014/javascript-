{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[292],{98:function(e,t,a){\"use strict\";a.r(t);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"node-dashdash-changelog\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#node-dashdash-changelog\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" node-dashdash changelog\")]),a(\"h2\",{attrs:{id:\"not-yet-released\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#not-yet-released\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" not yet released\")]),a(\"p\",[e._v(\"(nothing yet)\")]),a(\"h2\",{attrs:{id:\"_1-14-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-14-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.14.1\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v('[issue #30] Change the output used by dashdash\\'s Bash completion support to\\nindicate \"there are no completions for this argument\" to cope with different\\nsorting rules on different Bash/platforms. For example:')]),a(\"pre\",[a(\"code\",[e._v(\"  $ triton -v -p test2 package get <TAB>          # before\\n  ##-no -tritonpackage- completions-##\\n\\n  $ triton -v -p test2 package get <TAB>          # after\\n  ##-no-completion- -results-##\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-14-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-14-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.14.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"New \"),a(\"code\",[e._v(\"synopsisFromOpt(<option spec>)\")]),e._v(\" function. This will be used by\\n\"),a(\"a\",{attrs:{href:\"https://github.com/trentm/node-cmdln\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"node-cmdln\")]),e._v(\" to put together a synopsis\\nof options for a command. Some examples:\")]),a(\"pre\",[a(\"code\",[e._v(\"  > synopsisFromOpt({names: ['help', 'h'], type: 'bool'});\\n  '[ --help | -h ]'\\n  > synopsisFromOpt({name: 'file', type: 'string', helpArg: 'FILE'});\\n  '[ --file=FILE ]'\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-13-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-13-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.13.1\")]),a(\"ul\",[a(\"li\",[e._v(\"[issue #20] \"),a(\"code\",[e._v(\"bashCompletionSpecFromOptions\")]),e._v(\" breaks on an options array with\\nan empty-string group.\")])]),a(\"h2\",{attrs:{id:\"_1-13-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-13-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.13.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Update assert-plus dep to 1.x to get recent fixes (particularly for\\n\"),a(\"code\",[e._v(\"assert.optional*\")]),e._v(\").\")])]),a(\"li\",[a(\"p\",[e._v(\"Drop testing (and official support in packages.json#engines) for node 0.8.x.\\nAdd testing against node 5.x and 4.x with \"),a(\"code\",[e._v(\"make testall\")]),e._v(\".\")])]),a(\"li\",[a(\"p\",[e._v(\"[pull #16] Change the \"),a(\"code\",[e._v(\"positiveInteger\")]),e._v(' type to NOT accept zero (0).\\nFor those who might need the old behaviour, see\\n\"examples/custom-option-intGteZero.js\".  (By Dave Pacheco.)')])])]),a(\"h2\",{attrs:{id:\"_1-12-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-12-2\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.12.2\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Bash completion: Add \"),a(\"code\",[e._v(\"argtypes\")]),e._v(\" to specify the types of positional args.\\nE.g. this would allow you to have an \"),a(\"code\",[e._v(\"ssh\")]),e._v(\" command with \"),a(\"code\",[e._v(\"argtypes = ['host', 'cmd']\")]),e._v(\" for bash completion. You then have to provide Bash functions to\\nhandle completing those types via the \"),a(\"code\",[e._v(\"specExtra\")]),e._v(' arg. See\\n\"'),a(\"a\",{attrs:{href:\"examples/ddcompletion.js\"}},[e._v(\"examples/ddcompletion.js\")]),e._v('\" for an example.')])]),a(\"li\",[a(\"p\",[e._v(\"Bash completion: Tweak so that options or only offered as completions when\\nthere is a leading '-'. E.g. \"),a(\"code\",[e._v(\"mytool <TAB>\")]),e._v(\" does NOT offer options, \"),a(\"code\",[e._v(\"mytool -<TAB>\")]),a(\"em\",[e._v(\"does\")]),e._v('. Without this, a tool with options would never be able to\\nfallback to Bash\\'s \"default\" completion. For example '),a(\"code\",[e._v(\"ls <TAB>\")]),e._v(\" wouldn't\\nresult in filename completion. Now it will.\")])]),a(\"li\",[a(\"p\",[e._v(\"Bash completion: A workaround for not being able to explicitly have \"),a(\"em\",[e._v(\"no\")]),e._v(\"\\ncompletion results. Because dashdash's completion uses \"),a(\"code\",[e._v(\"complete -o default\")]),e._v(',\\nwe fallback to Bash\\'s \"default\" completion (typically for filename\\ncompletion). Before this change, an attempt to explicitly say \"there are\\nno completions that match\" would unintentionally trigger filename completion.\\nInstead as a workaround we return:')]),a(\"pre\",[a(\"code\",[e._v(\"  $ ddcompletion --none <TAB>         # the 'none' argtype\\n  ##-no           completions-##\\n\\n  $ ddcompletion                      # a custom 'fruit' argtype\\n  apple   banana  orange\\n  $ ddcompletion z\\n  ##-no           -fruit-         completions-##\\n\")])]),a(\"p\",[e._v(\"This is a bit of a hack, but IMO a better experience than the surprise\\nof matching a local filename beginning with 'z', which isn't, in this\\ncase, a \\\"fruit\\\".\")])])]),a(\"h2\",{attrs:{id:\"_1-12-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-12-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.12.1\")]),a(\"ul\",[a(\"li\",[e._v(\"Bash completion: Document \"),a(\"code\",[e._v(\"<option spec>.completionType\")]),e._v(\". Add \"),a(\"code\",[e._v(\"includeHidden\")]),e._v(\"\\noption to \"),a(\"code\",[e._v(\"bashCompletionSpecFromOptions()\")]),e._v(\". Add support for dealing with\\nhidden subcmds.\")])]),a(\"h2\",{attrs:{id:\"_1-12-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-12-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.12.0\")]),a(\"ul\",[a(\"li\",[e._v('Support for generating Bash completion files. See the \"Bash completion\"\\nsection of the README.md and \"examples/ddcompletion.js\" for an example.')])]),a(\"h2\",{attrs:{id:\"_1-11-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-11-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.11.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Add the \"),a(\"code\",[e._v(\"arrayFlatten\")]),e._v(\" boolean option to \"),a(\"code\",[e._v(\"dashdash.addOptionType\")]),e._v(\" used for\\ncustom option types. This allows one to create an \"),a(\"code\",[e._v(\"arrayOf...\")]),e._v(\" option type\\nwhere each usage of the option can return multiple results. For example:\")]),a(\"pre\",[a(\"code\",[e._v(\"  node mytool.js --foo a,b --foo c\\n\")])]),a(\"p\",[e._v(\"We could define an option type for \"),a(\"code\",[e._v(\"--foo\")]),e._v(\" such that\\n\"),a(\"code\",[e._v(\"opts.foo = ['a', 'b', 'c']\")]),e._v('. See\\n\"'),a(\"a\",{attrs:{href:\"examples/custom-option-arrayOfCommaSepString.js\"}},[e._v(\"examples/custom-option-arrayOfCommaSepString.js\")]),e._v('\"\\nfor an example.')])])]),a(\"h2\",{attrs:{id:\"_1-10-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-10-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.10.1\")]),a(\"ul\",[a(\"li\",[e._v(\"Trim the published package to the minimal bits. Before: 24K tarball, 144K unpacked.\\nAfter: 12K tarball, 48K unpacked. \"),a(\"code\",[e._v(\"npm\")]),e._v(\" won't let me drop the README.md. ðŸ˜ƒ\")])]),a(\"h2\",{attrs:{id:\"_1-10-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-10-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.10.0\")]),a(\"ul\",[a(\"li\",[e._v(\"[issue #9] Support \"),a(\"code\",[e._v(\"includeDefault\")]),e._v(\" in help config (similar to \"),a(\"code\",[e._v(\"includeEnv\")]),e._v(\") to have a\\nnote of an option's default value, if any, in help output.\")]),a(\"li\",[e._v(\"[issue #11] Fix option group breakage introduced in v1.9.0.\")])]),a(\"h2\",{attrs:{id:\"_1-9-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-9-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.9.0\")]),a(\"ul\",[a(\"li\",[e._v(\"[issue #10] Custom option types added with \"),a(\"code\",[e._v(\"addOptionType\")]),e._v(' can specify a\\n\"default\" value. See \"examples/custom-option-fruit.js\".')])]),a(\"h2\",{attrs:{id:\"_1-8-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-8-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.8.0\")]),a(\"ul\",[a(\"li\",[e._v(\"Support \"),a(\"code\",[e._v(\"hidden: true\")]),e._v(\" in an option spec to have help output exclude this\\noption.\")])]),a(\"h2\",{attrs:{id:\"_1-7-3\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-7-3\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.7.3\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"[issue #8] Fix parsing of a short option group when one of the\\noption takes an argument. For example, consider \"),a(\"code\",[e._v(\"tail\")]),e._v(\" with\\na \"),a(\"code\",[e._v(\"-f\")]),e._v(\" boolean option and a \"),a(\"code\",[e._v(\"-n\")]),e._v(\" option that takes a number\\nargument. This should parse:\")]),a(\"pre\",[a(\"code\",[e._v(\"  tail -fn5\\n\")])]),a(\"p\",[e._v(\"Before this change, that would not parse correctly.\\nIt is suspected that this was introduced in version 1.4.0\\n(with commit 656fa8bc71c372ebddad0a7026bd71611e2ec99a).\")])])]),a(\"h2\",{attrs:{id:\"_1-7-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-7-2\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.7.2\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Known issues: #8\")])]),a(\"li\",[a(\"p\",[e._v(\"Exclude 'tools/' dir in packages published to npm.\")])])]),a(\"h2\",{attrs:{id:\"_1-7-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-7-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.7.1\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Known issues: #8\")])]),a(\"li\",[a(\"p\",[e._v(\"Support an option group \"),a(\"em\",[e._v(\"empty string\")]),e._v(\" value:\")]),a(\"pre\",[a(\"code\",[e._v(\"  ...\\n  { group: '' },\\n  ...\\n\")])]),a(\"p\",[e._v(\"to render as a blank line in option help. This can help separate loosely\\nrelated sets of options without resorting to a title for option groups.\")])])]),a(\"h2\",{attrs:{id:\"_1-7-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-7-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.7.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Known issues: #8\")])]),a(\"li\",[a(\"p\",[e._v(\"[pull #7] Support for \"),a(\"code\",[e._v(\"<parser>.help({helpWrap: false, ...})\")]),e._v(\" option to be able\\nto fully control the formatting for option help (by Patrick Mooney) \"),a(\"code\",[e._v(\"helpWrap: false\")]),e._v(\" can also be set on individual options in the option objects, e.g.:\")]),a(\"pre\",[a(\"code\",[e._v(\"  var options = [\\n      {\\n        names: ['foo'],\\n        type: 'string',\\n        helpWrap: false,\\n        help: 'long help with\\\\n  newlines' +\\n          '\\\\n  spaces\\\\n  and such\\\\nwill render correctly'\\n      },\\n      ...\\n  ];\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-6-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-6-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.6.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Known issues: #8\")])]),a(\"li\",[a(\"p\",[e._v(\"[pull #6] Support headings between groups of options (by Joshua M. Clulow)\\nso that this code:\")]),a(\"pre\",[a(\"code\",[e._v(\"  var options = [\\n      { group: 'Armament Options' },\\n      { names: [ 'weapon', 'w' ], type: 'string' },\\n      { group: 'General Options' },\\n      { names: [ 'help', 'h' ], type: 'bool' }\\n  ];\\n  ...\\n\")])]),a(\"p\",[e._v(\"will give you this help output:\")]),a(\"pre\",[a(\"code\",[e._v(\"  ...\\n    Armament Options:\\n      -w, --weapon\\n\\n    General Options:\\n      -h, --help\\n  ...\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-5-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-5-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.5.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Known issues: #8\")])]),a(\"li\",[a(\"p\",[e._v('Add support for adding custom option types. \"examples/custom-option-duration.js\"\\nshows an example adding a \"duration\" option type.')]),a(\"pre\",[a(\"code\",[e._v('  $ node custom-option-duration.js -t 1h\\n  duration: 3600000 ms\\n  $ node custom-option-duration.js -t 1s\\n  duration: 1000 ms\\n  $ node custom-option-duration.js -t 5d\\n  duration: 432000000 ms\\n  $ node custom-option-duration.js -t bogus\\n  custom-option-duration.js: error: arg for \"-t\" is not a valid duration: \"bogus\"\\n')])]),a(\"p\",[e._v(\"A custom option type is added via:\")]),a(\"pre\",[a(\"code\",[e._v(\"  var dashdash = require('dashdash');\\n  dashdash.addOptionType({\\n      name: '...',\\n      takesArg: true,\\n      helpArg: '...',\\n      parseArg: function (option, optstr, arg) {\\n          ...\\n      }\\n  });\\n\")])])]),a(\"li\",[a(\"p\",[e._v(\"[issue #4] Add \"),a(\"code\",[e._v(\"date\")]),e._v(\" and \"),a(\"code\",[e._v(\"arrayOfDate\")]),e._v(\" option types. They accept these date\\nformats: epoch second times (e.g. 1396031701) and ISO 8601 format:\\n\"),a(\"code\",[e._v(\"YYYY-MM-DD[THH:MM:SS[.sss][Z]]\")]),e._v(' (e.g. \"2014-03-28\",\\n\"2014-03-28T18:35:01.489Z\"). See \"examples/date.js\" for an example usage.')]),a(\"pre\",[a(\"code\",[e._v(\"  $ node examples/date.js -s 2014-01-01 -e $(date +%s)\\n  start at 2014-01-01T00:00:00.000Z\\n  end at 2014-03-29T04:26:18.000Z\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-4-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.4.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Known issues: #8\")])]),a(\"li\",[a(\"p\",[e._v(\"[pull #2, pull #3] Add a \"),a(\"code\",[e._v(\"allowUnknown: true\")]),e._v(\" option on \"),a(\"code\",[e._v(\"createParser\")]),e._v(\" to\\nallow unknown options to be passed through as \"),a(\"code\",[e._v(\"opts._args\")]),e._v(\" instead of parsing\\nthrowing an exception (by https://github.com/isaacs).\")]),a(\"p\",[e._v(\"See 'allowUnknown' in the README for a subtle caveat.\")])])]),a(\"h2\",{attrs:{id:\"_1-3-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-2\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.3.2\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Fix a subtlety where a \"),a(\"em\",[e._v(\"bool\")]),e._v(\" option using both \"),a(\"code\",[e._v(\"env\")]),e._v(\" and \"),a(\"code\",[e._v(\"default\")]),e._v(\" didn't\\nwork exactly correctly. If \"),a(\"code\",[e._v(\"default: false\")]),e._v(\" then all was fine (by luck).\\nHowever, if you had an option like this:\")]),a(\"pre\",[a(\"code\",[e._v(\"  options: [ {\\n      names: ['verbose', 'v'],\\n      env: 'FOO_VERBOSE',\\n      'default': true,    // <--- this\\n      type: 'bool'\\n  } ],\\n\")])]),a(\"p\",[e._v(\"wanted \"),a(\"code\",[e._v(\"FOO_VERBOSE=0\")]),e._v(\" to make the option false, then you need the fix\\nin this version of dashdash.\")])])]),a(\"h2\",{attrs:{id:\"_1-3-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.3.1\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"[issue #1] Fix an envvar not winning over an option 'default'. Previously\\nan option with both \"),a(\"code\",[e._v(\"default\")]),e._v(\" and \"),a(\"code\",[e._v(\"env\")]),e._v(\" would never take a value from the\\nenvironment variable. E.g. \"),a(\"code\",[e._v(\"FOO_FILE\")]),e._v(\" would never work here:\")]),a(\"pre\",[a(\"code\",[e._v(\"  options: [ {\\n      names: ['file', 'f'],\\n      env: 'FOO_FILE',\\n      'default': 'default.file',\\n      type: 'string'\\n  } ],\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-3-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.3.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"[Backward incompatible change for boolean envvars] Change the\\ninterpretation of environment variables for boolean options to consider '0'\\nto be false. Previous to this \"),a(\"em\",[e._v(\"any\")]),e._v(\" value to the envvar was considered\\ntrue -- which was quite misleading. Example:\")]),a(\"pre\",[a(\"code\",[e._v(\"  $ FOO_VERBOSE=0 node examples/foo.js\\n  # opts: { verbose: [ false ],\\n    _order: [ { key: 'verbose', value: false, from: 'env' } ],\\n    _args: [] }\\n  # args: []\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-2-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.2.1\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v(\"Fix for \"),a(\"code\",[e._v(\"parse.help({includeEnv: true, ...})\")]),e._v(\" handling to ensure that an\\noption with an \"),a(\"code\",[e._v(\"env\")]),a(\"strong\",[e._v(\"but no \"),a(\"code\",[e._v(\"help\")])]),e._v(' still has the \"Environment: ...\"\\noutput. E.g.:')]),a(\"pre\",[a(\"code\",[e._v(\"  { names: ['foo'], type: 'string', env: 'FOO' }\\n\\n  ...\\n\\n  --foo=ARG      Environment: FOO=ARG\\n\")])])])]),a(\"h2\",{attrs:{id:\"_1-2-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.2.0\")]),a(\"ul\",[a(\"li\",[e._v(\"Transform the option key on the \"),a(\"code\",[e._v(\"opts\")]),e._v(\" object returned from\\n\"),a(\"code\",[e._v(\"<parser>.parse()\")]),e._v(\" for convenience. Currently this is just\\n\"),a(\"code\",[e._v(\"s/-/_/g\")]),e._v(\", e.g. '--dry-run' -> \"),a(\"code\",[e._v(\"opts.dry_run\")]),e._v(\". This allow one to use hyphen\\nin option names (common) but not have to do silly things like\\n\"),a(\"code\",[e._v('opt[\"dry-run\"]')]),e._v(\" to access the parsed results.\")])]),a(\"h2\",{attrs:{id:\"_1-1-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.1.0\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v('Environment variable integration. Envvars can be associated with an option,\\nthen option processing will fallback to using that envvar if defined and\\nif the option isn\\'t specified in argv. See the \"Environment variable\\nintegration\" section in the README.')])]),a(\"li\",[a(\"p\",[e._v(\"Change the \"),a(\"code\",[e._v(\"<parser>.parse()\")]),e._v(\" signature to take a single object with keys\\nfor arguments. The old signature is still supported.\")])]),a(\"li\",[a(\"p\",[a(\"code\",[e._v(\"dashdash.createParser(CONFIG)\")]),e._v(\" alternative to \"),a(\"code\",[e._v(\"new dashdash.Parser(CONFIG)\")]),e._v(\"\\na la many node-land APIs.\")])])]),a(\"h2\",{attrs:{id:\"_1-0-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-0-2\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.0.2\")]),a(\"ul\",[a(\"li\",[a(\"p\",[e._v('Add \"positiveInteger\" and \"arrayOfPositiveInteger\" option types that only\\naccept positive integers.')])]),a(\"li\",[a(\"p\",[e._v('Add \"integer\" and \"arrayOfInteger\" option types that accepts only integers.\\nNote that, for better or worse, these do NOT accept: \"0x42\" (hex), \"1e2\"\\n(with exponent) or \"1.\", \"3.0\" (floats).')])])]),a(\"h2\",{attrs:{id:\"_1-0-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-0-1\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.0.1\")]),a(\"ul\",[a(\"li\",[e._v(\"Fix not modifying the given option spec objects (which breaks creating\\na Parser with them more than once).\")])]),a(\"h2\",{attrs:{id:\"_1-0-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-0-0\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.0.0\")]),a(\"p\",[e._v(\"First release.\")])])}],!1,null,null,null);t.default=o.exports}}]);","extractedComments":[]}