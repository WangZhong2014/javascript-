{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{173:function(e,t,a){\"use strict\";a.r(t);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"div\",{staticClass:\"content\"},[a(\"p\",[e._v(\"Port of the OpenBSD \"),a(\"code\",[e._v(\"bcrypt_pbkdf\")]),e._v(\" function to pure Javascript. \"),a(\"code\",[e._v(\"npm\")]),e._v(\"-ified\\nversion of [Devi Mandiri's port]\\n(https://github.com/devi/tmp/blob/master/js/bcrypt_pbkdf.js),\\nwith some minor performance improvements. The code is copied verbatim (and\\nun-styled) from Devi's work.\")]),a(\"p\",[e._v(\"This product includes software developed by Niels Provos.\")]),a(\"h2\",{attrs:{id:\"api\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#api\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" API\")]),a(\"h3\",{attrs:{id:\"bcrypt-pbkdf-pbkdf-pass-passlen-salt-saltlen-key-keylen-rounds\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bcrypt-pbkdf-pbkdf-pass-passlen-salt-saltlen-key-keylen-rounds\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),a(\"code\",[e._v(\"bcrypt_pbkdf.pbkdf(pass, passlen, salt, saltlen, key, keylen, rounds)\")])]),a(\"p\",[e._v(\"Derive a cryptographic key of arbitrary length from a given password and salt,\\nusing the OpenBSD \"),a(\"code\",[e._v(\"bcrypt_pbkdf\")]),e._v(\" function. This is a combination of Blowfish and\\nSHA-512.\")]),a(\"p\",[e._v(\"See \"),a(\"a\",{attrs:{href:\"http://www.tedunangst.com/flak/post/bcrypt-pbkdf\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"this article\")]),e._v(\" for\\nfurther information.\")]),a(\"p\",[e._v(\"Parameters:\")]),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"pass\")]),e._v(\", a Uint8Array of length \"),a(\"code\",[e._v(\"passlen\")])]),a(\"li\",[a(\"code\",[e._v(\"passlen\")]),e._v(\", an integer Number\")]),a(\"li\",[a(\"code\",[e._v(\"salt\")]),e._v(\", a Uint8Array of length \"),a(\"code\",[e._v(\"saltlen\")])]),a(\"li\",[a(\"code\",[e._v(\"saltlen\")]),e._v(\", an integer Number\")]),a(\"li\",[a(\"code\",[e._v(\"key\")]),e._v(\", a Uint8Array of length \"),a(\"code\",[e._v(\"keylen\")]),e._v(\", will be filled with output\")]),a(\"li\",[a(\"code\",[e._v(\"keylen\")]),e._v(\", an integer Number\")]),a(\"li\",[a(\"code\",[e._v(\"rounds\")]),e._v(\", an integer Number, number of rounds of the PBKDF to run\")])]),a(\"h3\",{attrs:{id:\"bcrypt-pbkdf-hash-sha2pass-sha2salt-out\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bcrypt-pbkdf-hash-sha2pass-sha2salt-out\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),a(\"code\",[e._v(\"bcrypt_pbkdf.hash(sha2pass, sha2salt, out)\")])]),a(\"p\",[e._v(\"Calculate a Blowfish hash, given SHA2-512 output of a password and salt. Used as\\npart of the inner round function in the PBKDF.\")]),a(\"p\",[e._v(\"Parameters:\")]),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"sha2pass\")]),e._v(\", a Uint8Array of length 64\")]),a(\"li\",[a(\"code\",[e._v(\"sha2salt\")]),e._v(\", a Uint8Array of length 64\")]),a(\"li\",[a(\"code\",[e._v(\"out\")]),e._v(\", a Uint8Array of length 32, will be filled with output\")])])])}],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}