{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[274],{64:function(e,t,s){\"use strict\";s.r(t);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s(\"div\",{staticClass:\"content\"},[s(\"h1\",{attrs:{id:\"extsprintf-extended-posix-style-sprintf\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#extsprintf-extended-posix-style-sprintf\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" extsprintf: extended POSIX-style sprintf\")]),s(\"p\",[e._v(\"Stripped down version of s[n]printf(3c).  We make a best effort to throw an\\nexception when given a format string we don't understand, rather than ignoring\\nit, so that we won't break existing programs if/when we go implement the rest\\nof this.\")]),s(\"p\",[e._v(\"This implementation currently supports specifying\")]),s(\"ul\",[s(\"li\",[e._v(\"field alignment ('-' flag),\")]),s(\"li\",[e._v(\"zero-pad ('0' flag)\")]),s(\"li\",[e._v(\"always show numeric sign ('+' flag),\")]),s(\"li\",[e._v(\"field width\")]),s(\"li\",[e._v(\"conversions for strings, decimal integers, and floats (numbers).\")]),s(\"li\",[e._v(\"argument size specifiers.  These are all accepted but ignored, since\\nJavascript has no notion of the physical size of an argument.\")])]),s(\"p\",[e._v(\"Everything else is currently unsupported, most notably: precision, unsigned\\nnumbers, non-decimal numbers, and characters.\")]),s(\"p\",[e._v(\"Besides the usual POSIX conversions, this implementation supports:\")]),s(\"ul\",[s(\"li\",[s(\"code\",[e._v(\"%j\")]),e._v(': pretty-print a JSON object (using node\\'s \"inspect\")')]),s(\"li\",[s(\"code\",[e._v(\"%r\")]),e._v(\": pretty-print an Error object\")])]),s(\"h1\",{attrs:{id:\"example\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#example\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Example\")]),s(\"p\",[e._v(\"First, install it:\")]),s(\"pre\",[s(\"code\",[e._v(\"# npm install extsprintf\\n\")])]),s(\"p\",[e._v(\"Now, use it:\")]),s(\"pre\",[s(\"code\",[e._v(\"var mod_extsprintf = require('extsprintf');\\nconsole.log(mod_extsprintf.sprintf('hello %25s', 'world'));\\n\")])]),s(\"p\",[e._v(\"outputs:\")]),s(\"pre\",[s(\"code\",[e._v(\"hello                     world\\n\")])]),s(\"h1\",{attrs:{id:\"also-supported\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#also-supported\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Also supported\")]),s(\"p\",[s(\"strong\",[e._v(\"printf\")]),e._v(\": same args as sprintf, but prints the result to stdout\")]),s(\"p\",[s(\"strong\",[e._v(\"fprintf\")]),e._v(\": same args as sprintf, preceded by a Node stream.  Prints the result\\nto the given stream.\")])])}],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}