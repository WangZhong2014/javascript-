{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[342],{287:function(t,s,a){\"use strict\";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"content\"},[a(\"p\",[t._v(\"这一章主要是主要是讲语句。\")]),a(\"h2\",{attrs:{id:\"语句是什么？\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#语句是什么？\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 语句是什么？\")]),a(\"p\",[t._v(\"如果说表达式是js中的短语，那么语句就是js整句或命令。\\n表达式计算一个值，语句用来执行以使某事发生。\")]),a(\"p\",[t._v(\"js中的语句类型有：\")]),a(\"ul\",[a(\"li\",[t._v(\"声明语句\")]),a(\"li\",[t._v(\"表达式语句\")]),a(\"li\",[t._v(\"条件语句\")]),a(\"li\",[t._v(\"循环语句\")]),a(\"li\",[t._v(\"跳转语句\")]),a(\"li\",[t._v(\"其他语句\")])]),a(\"h3\",{attrs:{id:\"表达式语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#表达式语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 表达式语句\")]),a(\"p\",[t._v(\"具有副作用的表达式，就是js中最简单的语句了。\\n如：\\n\"),a(\"code\",[t._v('greeting = \"hello\" + name;')]),a(\"code\",[t._v(\"i *=3\")]),t._v(\"\\n既是表达式，也是一个语句，让greeting和i的值重新改变了。\")]),a(\"h3\",{attrs:{id:\"复合语句和空白语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复合语句和空白语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 复合语句和空白语句\")]),a(\"p\",[t._v(\"可以使用逗号，将几个表达式连接现在一起，形成一个表达式，同样，js中还可以将多天语句联合在一吹，形成一条复合语句。复合语句只需要用花括号括起来即可。\")]),a(\"p\",[t._v(\"空语句就是一个分号。\")]),a(\"h3\",{attrs:{id:\"声明语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#声明语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 声明语句\")]),a(\"h5\",{attrs:{id:\"var\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#var\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" var\")]),a(\"p\",[t._v(\"var语句用来声明一个或多个变量，后面通常跟着初始化表达式，用于指定它的初始值。\")]),a(\"ul\",[a(\"li\",[t._v(\"var 语句如果出现在一个函数体内，那么它定义的就是局部变量。其作用域就在这个函数内。\")]),a(\"li\",[t._v(\"在顶层使用var语句，它声明的就是全局变量，在整个js程序中都是可见的。\")]),a(\"li\",[t._v(\"全局变量是全局对象的属性。通过var语句声明的变量是无法通过delete删除的。\")]),a(\"li\",[t._v(\"如果var语句的变量没有指定初试化表达式，那么这个变量的值初始化为undefined。\")]),a(\"li\",[t._v(\"变量声明语句会被“提前”直脚本或函数的顶部，不过初始化的操作不会提前，依旧在原来的var语句位置执行。\")])]),a(\"h5\",{attrs:{id:\"function\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#function\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" function\")]),a(\"p\",[t._v(\"函数定义有2中方式：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 第一种：函数定义表达式\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function-variable function\"}},[t._v(\"f\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 将表达式复制给一个变量\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 第二种：函数声明语句\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"funcname\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"arg1\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"arg2\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"……\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    statements\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\")])]),a(\"p\",[t._v(\"定义函数时并不执行这个函数。\")]),a(\"p\",[t._v(\"函数声明语句通常出现在js代码的最顶层，也可恶意嵌套在其他函数体内。但在嵌套时，函数声明只能出现在嵌套函数体的顶部。也就是说，函数定义不能出现在if语句、while循环或其他任何语句中。\")]),a(\"p\",[t._v(\"函数声明语句和函数定义表达式包含相同的函数名，但两者仍然有所不同。两种方式都创建了新的函数对象，但函数声明语句中的函数名是一个变量名，变量指向函数对象。\")]),a(\"p\",[t._v(\"和var一样，函数定义语句中函数被显式地“提前”到了脚本或函数的顶部。因此他们在整个脚本和函数内都是可见的。\\n但使用var的话，函数定义表达式只有变量声明提前了——变量初始化代码仍然留在原来的位置。\\n使用函数声明语句的话，函数名称和函数体均提前：脚本中的所有函数和函数中所有嵌套的函数都会在当前上下文中其他代码之前声明。也就是说，在函数执行时，可以在声明一个js函数之前调用它。\")]),a(\"h3\",{attrs:{id:\"条件语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#条件语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 条件语句\")]),a(\"p\",[t._v(\"条件语句是通过判断表达式的值来决定执行还是跳过某些语句。\")]),a(\"h4\",{attrs:{id:\"if语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#if语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" if语句\")]),a(\"p\",[t._v(\"if语句是一种基本的控制语句，它让js程序可以选择执行路径。如：\\n\"),a(\"code\",[t._v(\"if(expression) statement\")]),t._v(\"\\nif语句中括住expression的圆括号在语法上是必须的。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"if(expression)\\n    statement1\\nelse statement2\\n\")])]),a(\"p\",[t._v(\"需要加花括号，来保证执行不出bug，以及确保易读性。\")]),a(\"h4\",{attrs:{id:\"else-if-语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#else-if-语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" else if 语句\")]),a(\"p\",[t._v(\"if/else语句通过判断一个表达式的计算结果来选择执行两条分支中的一条。但当代码中有多条分支的时候该怎么办呢？\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"expression\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    statement \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"expression\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    statement \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"expression\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    statement \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    statement \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"4\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 之前条件都为false,则执行这里的代码块4.\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"h4\",{attrs:{id:\"switch语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#switch语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" switch语句\")]),a(\"p\",[t._v(\"swith(n){\\ncase 1 :statment 1   // 如果n===1，从这里执行\\nbreak;\")]),a(\"pre\",[a(\"code\",[t._v(\"case 2: statment 2   // 如果n===2, 从这里执行\\nbreak;\\n\\ncase 3: statment 3  // 如果n===3，从这里执行。\\nbreak;\\n\\ndefault: statement4 // 如果都不匹配，从这里执行。\\nbreak; //停止switch语句\\n\")])]),a(\"p\",[t._v(\"}\")]),a(\"p\",[t._v(\"这里，switch语句首先计算switch关键字后的表达式，然后按照从上到下的顺序计算每个case后的表达式，直到执行到case的表达式的值与switch的表达式的值相等时为止。\\n由于对每隔case的匹配操作实际上是===恒等运算符的比较。因此表达式和case的匹配并不会做任何类型转换。\")]),a(\"p\",[t._v(\"因为每次执行switch语句的时候，并不是所有的case表达式都能执行到，因此，应当避免使用带有副作用的case表达式。比如函数调用表达式和赋值表达式。最安全的做法就是在case表达式中使用常量表达式。\")]),a(\"p\",[t._v(\"如果缺少default标签，且switch表达式与所有case表达式都不匹配，则switch整个语句将被跳过。\")]),a(\"h3\",{attrs:{id:\"循环语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#循环语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 循环语句\")]),a(\"p\",[t._v(\"while语句：\\n\"),a(\"code\",[t._v(\"while(expression) statement\")]),t._v(\"。\\njs首先会计算expression的值，如果它是假值，那么程序将跳过statement。如果expression的值是真值，那么它会一直循环下去。\")]),a(\"p\",[t._v(\"通常来说，我们并不想让js反复执行统一操作，因此几乎每次循环中，都会有一个或多个变量随着循环迭代而改变。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" count \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"count \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"count\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    count\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"do/while语句：\\ndo/while循环和while循环非常类似，只不过它是在循环的尾部而不是顶部检测循环表达式，这意味着循环至少会执行一次。do/while语法：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"do\")]),t._v(\" \\n  statement\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"expression\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"for语句：\\nfor (initialize ; test ; increment) statement;\\nfor语句有包含3个变量，初始化操作，循环条件判断和计数器变量更新。如果换成与之等价的while则为：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[t._v(\"initialize\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"test\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n      statement\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      increment\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"也就是说，initialize表达式只在循环开始之前执行一次。初始化表达式通常是一条赋值语句。\\n\"),a(\"code\",[t._v(\"for(initialize;test;increment) statement\")]),t._v(\"执行的顺序是：\")]),a(\"ol\",[a(\"li\",[t._v(\"initialize只执行1次。\")]),a(\"li\",[t._v(\"test执行。\")]),a(\"li\",[t._v(\"statement语句执行。\")]),a(\"li\",[t._v(\"increment执行。  (之后就开始循环了)\\n\"),a(\"ul\",[a(\"li\",[t._v(\"test\")]),a(\"li\",[t._v(\"statement\")]),a(\"li\",[t._v(\"increment\")])])])]),a(\"p\",[t._v(\"for循环的变量，不一定都是数字，可以是其他。\\n如：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"tail\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"next\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"next\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n\")])]),a(\"p\",[t._v(\"这段代码不包含initialize表达式，for循环中的三个表达式中的任何一个变量都可以忽略，但2个分号必不可少，必须有2个分号存在。\")]),a(\"h6\",{attrs:{id:\"for-in\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#for-in\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" for/in\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"variable \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \\n   statment\\n\")])]),a(\"p\",[t._v(\"variable通常是一个变量名，也可以是一个可以产生左值的表达式或通过var语句声明的变量，总之必须是一个适用于复制表达式左侧的值。\\nobject是一个表达式，这个表达式的结果必须是一个对象。\\n同样的，statement是一个语句或语句块，它构成了循环的主体。\")]),a(\"blockquote\"),a(\"p\",[t._v(\"用for循环历遍数组元素是非常简单的：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"而for/in循环则用来更方便的历遍对象属性成员：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"在执行for/in语句过程中，js先计算object表达式。如果表达式为null/undefined，js会跳过循环并执行后续的代码。如果表达式等于一个原始值，这个原始值将会转换为与之对应的包装对象。\\n否则，object就是一个对象了。js会依次枚举对象的属性来执行循环。\"),a(\"strong\",[t._v(\"然而在每次循环之前，js都会先计算variable表达式的值，并将属性名赋值给它。\")])]),a(\"p\",[t._v(\"需要注意的是：\\n只要for/in循环中variable的值可以当做赋值表达式的左值，它可以是任意表达式。每次循环它都会计算这个表达式，也就是说每次循环它计算的值有可能是不通的。\")]),a(\"p\",[t._v(\"js数组不过是一种特殊的对象，因此，for/in循环可以像枚举对象属性一样枚举数组索引。例如：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"z\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"for/in循环并不会遍历对象的所有属性，只有“可枚举”的属性才会便利到。由于js语言核心所定义的内置方法就不是“可枚举的”。比如，所有对象都有方法toString(),但for/in并不会枚举toString这个属性。除了内置方法外，还有许多内置对象的属性也是不可枚举的。\")]),a(\"p\",[t._v(\"代码中定义的所有属性和方法都是可枚举的。\\n对象可以继承其他对象的属性，那些继承的自定义属性也可以使用for/in枚举出来。\")]),a(\"p\",[t._v(\"如果for/in的循环体删除了还未枚举的属性，那么这个属性将不会再枚举。如果循环体定义了对象的新属性，这些属性通常也不会枚举到。\")]),a(\"h5\",{attrs:{id:\"属性枚举的顺序\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性枚举的顺序\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 属性枚举的顺序\")]),a(\"ol\",[a(\"li\",[t._v(\"除了所有非继承的“自有”属性之外的继承属性，都是可枚举的，而且按照它们定义的顺序进行枚举。\")]),a(\"li\",[t._v(\"如果对象属性继承自多个“原型”，也就是说它的原型链上有多个对象，那么链上的每个原型对象的属性的遍历也是依照特定顺序执行的。\")])]),a(\"h2\",{attrs:{id:\"跳转语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#跳转语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 跳转语句\")]),a(\"p\",[t._v(\"跳转语句可以使js从一个位置跳到另一个位置。\\nbreak语句是跳转到循环或者其他语句的结束。\\ncontinue语句是终止本次循环的执行，并开始下一次循环的执行。\\nreturn 语句让解释器跳出函数体的执行，并提供本次调用的返回值。\\nthrow语句触发或“抛出”一个异常，它是与try/catch/finally语句一同使用的。\")]),a(\"h4\",{attrs:{id:\"标签语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#标签语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 标签语句\")]),a(\"p\",[t._v(\"语句是可以添加标签的，标签是由与居前的标识符和冒号组成：\\n\"),a(\"code\",[t._v(\"identifier: statement\")])]),a(\"p\",[t._v(\"通过给语句定义标签，就可以在程序的任何地方通过标签名引用这条语句。也可以对多条语句定义标签。\")]),a(\"p\",[t._v(\"break和continue是js中可以使用语句标签的语句。\\nindentifier必须是一个合法的js标识符。\")]),a(\"h4\",{attrs:{id:\"break语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#break语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" break语句\")]),a(\"p\",[t._v(\"单独使用break语句的作用是立即退出最内层的循环或switch语句。\\n由于它能够使循环和switch语句退出，因此这种形式的break只有出现在这类语句中才是合法的。\")]),a(\"p\",[t._v(\"break语句同样允许后面跟随一个语句标签：\\nbreak labelname.(没有冒号)\\n在break和labelname之间不能换行。\\n当break和标签一块使用的时候，程序将跳转到这个标签所标识的语句块的结束，或者直接终止这个闭合语句块的执行。\")]),a(\"p\",[t._v(\"最后，break语句，控制权都无法越过函数的边界。鄙视，对于一条带标签的函数定义语句来说，不能从函数内部通过这个标签跳转到函数外部。\")]),a(\"p\",[t._v(\"当你喜欢通过break跳出非就近的循环体或者switch语句时，就会用到带标签的break语句。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"5\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" sum \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" success \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\ncompute_sum\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" x\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" row \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"row\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"break\")]),t._v(\" compute_sum\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"row\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" y \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" y\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"row\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" y\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" cell \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" row\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isNaN\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"cell\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"break\")]),t._v(\" compute_sum\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"cell\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            sum\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+=\")]),t._v(\"cell\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"sum\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"h4\",{attrs:{id:\"continue语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#continue语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" continue语句\")]),a(\"p\",[t._v(\"continue语句不是退出循环，而是执行下一次循环，和break很类似。\\n可以：\\ncontinue;\\n也可以带标签：continue labelname;\")]),a(\"p\",[t._v(\"不管continue带不带标签，它只能在循环体内使用。在其他地方使用会包语法错误。\")]),a(\"p\",[t._v(\"当执行到continue语句的时候，当前的循环就终止了，随即执行下一次循环，在不通类型的循环中，continue的行为也有所区别：\")]),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"while循环中，在循环开始出制定的expression会重复检测，如果检测结果为true，循环体会从头开始执行。\")])]),a(\"li\",[t._v(\"在do/while循环中，程序的执行直接跳到循环结尾处，这是会重新判断循环条件，之后才会继续下一次循环。\")]),a(\"li\",[t._v(\"for循环中，首先计算自增表达式，然后再次检测test表达式，用以判断是否执行循环体。\")]),a(\"li\",[t._v(\"在for/in循环中，循环开始遍历下一个属性名，并把这个属性名复制给指定的变量。\")])]),a(\"h4\",{attrs:{id:\"return语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#return语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" return语句\")]),a(\"p\",[t._v(\"函数调用是一种表达式，所有的表达式都有值。\\nreturn语句就是指函数调用后的返回值:\"),a(\"code\",[t._v(\"return rexpression\")]),t._v(\"。\")]),a(\"p\",[t._v(\"return语句只能在函数体内出现，如果不是的话会报语法错误。\")]),a(\"p\",[t._v(\"如果没有return语句，函数调用近执行每一条语句直至函数结束，最后返回调用程序。\\n这种情况下， 调用表达式的结果是undefined。\")]),a(\"p\",[t._v(\"return语句可以单独使用而不必带有expression，这样的话，函数也会向调用程序返回undefined。\")]),a(\"h4\",{attrs:{id:\"throw语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#throw语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" throw语句\")]),a(\"p\",[t._v(\"异常：是指当发生了某种异常情况或错误时产出的一个信号。抛出异常，就是用信号通知发生了错误或异常状况。\\n捕获异常是指处理这个信号，即采取必要的手段从异常中回复。\\n在js中，当产生运行时错误或程序使用throw语句时就会显式地抛出异常。使用try/catch/finally语句可以捕获异常。\")]),a(\"p\",[t._v(\"throw语句：\\n\"),a(\"code\",[t._v(\"throw expression\")])]),a(\"p\",[t._v(\"expression的值可以是任意类型。\\n当js解释器抛出异常的时候通常采用Error类型和其子类型。一个Error对象有 一个name属性表示错误类型，一个message属性用来存放传递给构造函数的字符串。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"factorial\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Error\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"x不能是负数\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" f \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" x\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" f \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"*=\")]),t._v(\" x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" x\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"--\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/* empty*/\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" f\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"当抛出异常的时候，js会立即停止当前正在执行的逻辑，并跳转至就近的异常处理程序。\\n异常处理程序是用try/catch/finally语句的catch从句编写的。\\n如果抛出异常的代码块没有一条相关联的catch从句，解释器会检查更高层的闭合代码块，看它是否有相关联的异常处理程序。\\n如果没有找到任何异常处理程序，js将会把异常当成程序错误来处理，并报告用户。\")]),a(\"h4\",{attrs:{id:\"try-catch-finally从句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#try-catch-finally从句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" try/catch/finally从句\")]),a(\"p\",[t._v(\"抛出异常和捕获异常。\\nthrow是抛出异常，try/catch/finally是捕获异常。\")]),a(\"p\",[t._v(\"try/catch/finally语句是js的异常处理机制。其中，try从句定义了需要处理的异常所在的代码块。\\n当try某处发生了异常时，调用catch内的代码逻辑。catch从句跟随finally语句，后者放置清理代码，不管try块中是否产生异常，finally块内的逻辑总是会执行。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"try{\\n// 这里的代码会从头到尾执行，但有时会抛出一个异常，要么是throw语句直接抛出异常，要么是通过调用一个方法抛出异常\\n}\\ncatch(ex) {\\n    // 当try语句块抛出异常的时候，这里才会执行。通过ex获取对error对象或其他值的引用，这里的代码块会处理这一部分的异常，也可以或略这个异常，直接抛出。\\n    还可以通过throw语句重新抛出异常\\n}\\nfinally{\\n    不管try有没有抛出异常，这里的代码都会执行，终止try语句块的方式有：\\n   1. 正常终止，执行完最后一条语句\\n   2. 通过break、continue,return终止\\n   3. 抛出异常，异常被catch捕获\\n   4. 抛出一个异常，异常未被捕获，向上传播\\n}\\n\")])]),a(\"p\",[t._v(\"只要try语句的代码有一部分执行了，那么finally 的代码就会执行。它通常在try从句的代码后用于清理工作。\")]),a(\"h3\",{attrs:{id:\"其他语句类型\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#其他语句类型\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 其他语句类型\")]),a(\"h4\",{attrs:{id:\"with语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#with语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" with语句\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"with\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nstatement\\n\")])]),a(\"p\",[t._v(\"with语句用于临时扩展作用域链，这条语句将object添加到作用域链的头部，然后执行statement，最后把作用域链恢复到原装。\\n在严格模式下， 是禁止使用with语句的。\\n不推荐使用。\")]),a(\"p\",[a(\"code\",[t._v(\"with(o) x= 1\")]),t._v(\"，如果对象o有一个属性x，那么这行代码给这个属性赋值为1，但如果o没有定义这个属性x，那么这段代码和不是用with语句的代码是一模一样的。它给一个局部变量或全局变量x赋值，或者创建全局对象的一个新属性。\\nwith语句提供了一种读取o属性的快捷方式，但它不能创建o的属性。\")]),a(\"h4\",{attrs:{id:\"debugger语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#debugger语句\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" debugger语句\")]),a(\"p\",[t._v(\"debugger语句通常什么都不做。然而，当调试程序并运行的时候，js解释器会以调试模式运行。\\ndebugger语句会产生一个断点，js代码的执行会停止在断点的位置，这是可以使用调试器输出变量的值、检查调用栈等。\")]),a(\"p\",[t._v(\"在es5中，debugger语句正式加入到这门语言中。但需要浏览器开启调试器才行。\")]),a(\"h4\",{attrs:{id:\"use-strict\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#use-strict\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(' \"use strict\"')]),a(\"p\",[t._v('\"use strict\"是es5引用的一条指令，其使用严格代码。')]),a(\"ul\",[a(\"li\",[t._v(\"如果在代码顶层使用了'use strict'指令，那么它们就是严格代码。\")]),a(\"li\",[t._v(\"如果在函数体定义所处的代码是严格代码或使用了'use strict'指令，那么函数体的代码也是严格代码。\")]),a(\"li\",[t._v(\"如果eval()调用时所处的代码是严格代码或eval()要执行的字符串中是用来'scrict code'指令，则eval()内的代码也是严格代码。\")])]),a(\"p\",[t._v(\"严格代码以严格模式执行。es5中的严格模式是js语言的一个受限制的子集，它修正了该语言的重要缺陷，并提供了壮健的查错功能和增强的安全机制。严格模式和非严格模式下，前三条最重要：\")]),a(\"ul\",[a(\"li\",[t._v(\"严格模式下禁止使用catch语句\")]),a(\"li\",[t._v(\"严格模式想，所有的变量都要先声明，如果给一个未声明的变量、函数、函数参数、catch从句参数或全局对象的属性赋值，将会抛出一个引用错误异常。（在非严格模式下，这种隐式声明的全局变量的方法是给全局对象新添加一个新属性）\")]),a(\"li\",[t._v(\"严格模式中，调用的函数（不是方法）中的一个this值是undefined。（在非严格模式下，调用的函数中的this值总是全局对象）。这种特性可以判断js是否支持严格模式：\\n\"),a(\"code\",[t._v(\"var hasStrictCode = (function() { 'use strict'; return this === undefinded()});\")])])])])}],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}