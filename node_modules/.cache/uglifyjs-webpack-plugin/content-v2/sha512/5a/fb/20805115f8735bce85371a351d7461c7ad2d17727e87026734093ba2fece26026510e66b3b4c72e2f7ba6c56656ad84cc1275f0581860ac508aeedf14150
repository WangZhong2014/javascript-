{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{170:function(t,a,s){\"use strict\";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"div\",{staticClass:\"content\"},[s(\"h1\",{attrs:{id:\"byte-wise-matching-for-node-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#byte-wise-matching-for-node-js\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Byte-wise matching for Node.JS\")]),s(\"p\",[s(\"a\",{attrs:{href:\"https://travis-ci.org/squaremo/bitsyntax-js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s(\"img\",{attrs:{src:\"https://travis-ci.org/squaremo/bitsyntax-js.png?branch=master\",alt:\"Build Status\"}})])]),s(\"p\",[t._v(\"Gives a compact syntax for parsing and constructing byte buffers,\\nderived from \"),s(\"a\",{attrs:{href:\"http://www.erlang.org/doc/programming_examples/bit_syntax.html#id64858\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Erlang's bit\\nsyntax\")]),t._v(\".\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" bitsyntax \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'bitsyntax'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" pattern \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"matcher\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'len:8/integer, str:len/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" bound \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pattern\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"4\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0x41\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0x42\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0x43\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0x44\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nbound\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"str\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => <Buffer 41 42 43 44>\")]),t._v(\"\\n\")])]),s(\"p\",[t._v(\"A typical use of this is parsing byte streams from sockets. For\\nexample, size-prefixed frames:\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" framePattern \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"matcher\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'len:32/integer, frame:len/binary, rest/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nsocket\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"on\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'data'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"process\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"data\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" m\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"m \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"framePattern\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"data\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"emit\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'frame'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" m\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"frame\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"process\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"m\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"rest\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"stashForNextData\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"data\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),s(\"p\",[t._v(\"Patterns can also be used to construct byte buffers from supplied\\nvalues:\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" spdyDataFrame \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'bitsyntax'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"builder\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'streamId:32, flags:8, length:24, data/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"spdyDataFrame\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"streamId\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" flags\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" length\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"bin\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" data\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"bin\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),s(\"p\",[t._v(\"One or more segments of a pattern may also be supplied in multiple\\narguments, if that is more convenient; this makes it easier to split a\\nlong pattern over lines:\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"matcher\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'size:8, payload:size/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                          \"),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'rest/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),s(\"h2\",{attrs:{id:\"api\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#api\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" API\")]),s(\"h3\",{attrs:{id:\"matcher\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#matcher\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),s(\"code\",[t._v(\"matcher\")])]),s(\"p\",[t._v(\"Compiles a pattern as a string (or strings), to a function that will\\nreturn either a map of bindings, or \"),s(\"code\",[t._v(\"false\")]),t._v(\", given a buffer and\\noptionally an environment. The environment contains values for bound\\nvariables in the pattern (if there are any).\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"matcher\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'header:headerSize/binary, rest/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"p\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"4\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"headerSize\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nb\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"header\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => <Buffer 01 02 03>\")]),t._v(\"\\n\")])]),s(\"p\",[t._v(\"A matcher will return \"),s(\"code\",[t._v(\"false\")]),t._v(\" if the supplied buffer does not match\\nthe pattern; for example, if it has too few bytes, or a literal is not\\npresent.\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"matcher\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'\\\"foo=\\\", str/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"p\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v('\"bar=humbug\"')]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => false\")]),t._v(\"\\n\")])]),s(\"h3\",{attrs:{id:\"parse-and-match\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parse-and-match\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),s(\"code\",[t._v(\"parse\")]),t._v(\" and \"),s(\"code\",[t._v(\"match\")])]),s(\"p\",[t._v(\"When composed, equivalent to \"),s(\"code\",[t._v(\"matcher\")]),t._v(\"; may be useful if you want to\\nexamine the internal structure of patterns.\")]),s(\"p\",[s(\"code\",[t._v(\"parse\")]),t._v(\" takes strings as for \"),s(\"code\",[t._v(\"matcher\")]),t._v(\", and returns the internal\\nrepresentation of the pattern. \"),s(\"code\",[t._v(\"match\")]),t._v(\" takes this representation, a\\nbuffer, and optionally an environment, and returns the bindings or\\n\"),s(\"code\",[t._v(\"false\")]),t._v(\" (as with \"),s(\"code\",[t._v(\"matcher\")]),t._v(\").\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parse\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'header:headerSize/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                        \"),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'rest/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"p\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"4\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                          \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"headerSize\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nb\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"header\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => <Buffer 01 02 03>\")]),t._v(\"\\n\")])]),s(\"h3\",{attrs:{id:\"builder\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#builder\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),s(\"code\",[t._v(\"builder\")])]),s(\"p\",[t._v(\"Takes a pattern and returns a function that will construct a byte\\nbuffer, given values for the variables mentioned in the pattern.\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" cons \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"builder\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'size:8, bin/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"cons\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"size\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"6\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" bin\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'foobar'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => <Buffer 06 66 6f 6f 62 61 72>\")]),t._v(\"\\n\")])]),s(\"p\",[t._v(\"Patterns supplied to builders are slightly different to patterns\\nsupplied for matching, as noted below.\")]),s(\"h3\",{attrs:{id:\"build\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#build\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),s(\"code\",[t._v(\"build\")])]),s(\"p\",[t._v(\"Takes a parsed pattern and a map of variable values, and returns a\\nbuffer. As with \"),s(\"code\",[t._v(\"match\")]),t._v(\", may be useful to debug patterns.\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" pattern \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parse\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'size:8, bin:size/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nbitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"build\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"pattern\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"size\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"6\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" bin\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'foobar'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => <Buffer 06 66 6f 6f 62 61 72>\")]),t._v(\"\\n\")])]),s(\"h3\",{attrs:{id:\"write\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#write\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),s(\"code\",[t._v(\"write\")])]),s(\"p\",[t._v(\"Writes variable values into a buffer, at an offset, according to the\\nparsed pattern given. Returns the finishing offset, i.e., the supplied\\noffset plus the number of bytes written.\")]),s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" pattern \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" bitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parse\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'size:8, bin/binary'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" buf \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"7\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nbitsyntax\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"write\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" pattern\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"size\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),s(\"span\",{attrs:{class:\"token number\"}},[t._v(\"6\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" bin\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Buffer\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'foobar'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => 7\")]),t._v(\"\\nbuf\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// => <Buffer 06 66 6f 6f 62 61 72>\")]),t._v(\"\\n\")])]),s(\"h2\",{attrs:{id:\"patterns\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#patterns\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Patterns\")]),s(\"p\",[t._v(\"Patterns are sequences of segments, each matching a value. Segments\\nhave the general form\")]),s(\"pre\",[s(\"code\",[t._v(\" value:size/type_specifier_list\\n\")])]),s(\"p\",[t._v(\"The size and type specifier list may be omitted, giving three extra\\nvariations:\")]),s(\"pre\",[s(\"code\",[t._v(\"value\\nvalue:size\\nvalue/type_specifier_list\\n\")])]),s(\"p\",[t._v(\"The type specifier list is a list of keywords separated by\\nhyphens. Type specifiers are described below.\")]),s(\"p\",[t._v(\"Patterns are generally supplied as strings, with a comma-separated\\nseries of segments.\")]),s(\"h3\",{attrs:{id:\"variable-or-value\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#variable-or-value\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Variable or value\")]),s(\"p\",[t._v(\"The first part of a segment gives a variable name or a literal\\nvalue. If a variable name is given, the value matched by the segment\\nwill be bound to that variable name for the rest of the pattern. If a\\nliteral value is given, the matched value must equal that value. If a\\nvariable's value is given in the environment, the matched value must\\nequal the provided value.\")]),s(\"p\",[t._v(\"When used in a builder, the literal value will be copied into the\\nbuffer according to the type it is given. A variable name indicates a\\nslot into which a value supplied to the builder will be copied.\")]),s(\"p\",[t._v(\"The special variable name \"),s(\"code\",[t._v(\"_\")]),t._v(\" discards the value matched; i.e., it\\nsimply skips over the appropriate number of bits in the input. '_' is\\nnot allowed in builder patterns.\")]),s(\"h3\",{attrs:{id:\"size-and-unit\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#size-and-unit\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Size and unit\")]),s(\"p\",[t._v(\"The size of a segment is given following the value or variable,\\nseparated with a colon:\")]),s(\"pre\",[s(\"code\",[t._v(\"foo:32\\n\")])]),s(\"p\",[t._v(\"The unit is given in the list of specifiers as `'unit' and\\nan integer from 0..256, separated by a colon:\")]),s(\"pre\",[s(\"code\",[t._v(\"foo:4/integer-unit:8\\n\")])]),s(\"p\",[t._v(\"The size is the number of units in the value; the unit is given as a\\nnumber of bits. Unit can be of use, for example, when you want to\\nmatch integers of a number of bytes rather than a number of bits.\")]),s(\"p\",[t._v(\"For integers and floats, the default unit is 1 bit; to keep things\\naligned on byte boundaries, \"),s(\"code\",[t._v(\"unit * size\")]),t._v(\" must currently be a multiple\\nof 8. For binaries the default unit is 8, and the unit must be a\\nmultiple of 8.\")]),s(\"p\",[t._v(\"If the size is omitted and the type is integer, the size defaults to\\n8. If the size is omitted and the type is binary, the segment will\\nmatch all remaining bytes in the input; such a segment may only be\\nused at the end of a pattern, when matching.\")]),s(\"p\",[t._v(\"The size may also be given as an integer variable matched earlier in\\nthe pattern, as in the example given at the top. When constructing, a\\nsize may be a variable referring to the supplied environment.\")]),s(\"p\",[t._v(\"In builders, numbers will be rounded, masked or padded to fit the size\\nand units given; for example, \"),s(\"code\",[t._v(\"'256:8'\")]),t._v(\" gives the binary \"),s(\"code\",[t._v(\"Buffer<00>\")]),t._v(\"\\nbecause the lowest eight bits are 0; \"),s(\"code\",[t._v(\"'255:16\")]),t._v(\" gives the binary\\n\"),s(\"code\",[t._v(\"Buffer<00 ff>\")]),t._v(\".\")]),s(\"h3\",{attrs:{id:\"type-name-specifier\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#type-name-specifier\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Type name specifier\")]),s(\"p\",[t._v(\"One of \"),s(\"code\",[t._v(\"integer\")]),t._v(\", \"),s(\"code\",[t._v(\"binary\")]),t._v(\", \"),s(\"code\",[t._v(\"string\")]),t._v(\", \"),s(\"code\",[t._v(\"float\")]),t._v(\". If not given, the\\ndefault is \"),s(\"code\",[t._v(\"integer\")]),t._v(\".\")]),s(\"p\",[t._v(\"An integer is a big- or little-endian, signed or unsigned\\ninteger. Integers up to 32 bits are supported. Signed integers are\\ntwo's complement format. In JavaScript, only integers between -(2^53)\\nand 2^53 can be represented, and bitwise operators are only defined on\\n32-bit signed integers.\")]),s(\"p\",[t._v(\"A binary is simply a byte buffer; usually this will result in a slice\\nof the input buffer being returned, so beware mutation.\")]),s(\"p\",[t._v(\"A string is a UTF8 string consisting of the given number of bytes.\")]),s(\"p\",[t._v(\"A float is a 32- or 64-bit IEEE754 floating-point value (this is the\\nstandard JavaScript uses, as do Java and Erlang).\")]),s(\"h3\",{attrs:{id:\"endianness-specifier\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#endianness-specifier\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Endianness specifier\")]),s(\"p\",[t._v(\"Integers may be big- or little-endian; this refers to which 'end' of\\nthe bytes making up the integer are most significant. In network\\nprotocols integers are usually big-endian, meaning the first\\n(left-most) byte is the most significant, but this is not always the\\ncase.\")]),s(\"p\",[t._v(\"A specifier of \"),s(\"code\",[t._v(\"big\")]),t._v(\" means the integer will be parsed (or written into\\nthe result) as big-endian, and \"),s(\"code\",[t._v(\"little\")]),t._v(\" means the integer will be\\nparsed or written as little-endian. The default is big-endian.\")]),s(\"h3\",{attrs:{id:\"signedness-specifier\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#signedness-specifier\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Signedness specifier\")]),s(\"p\",[t._v(\"Integer segments may include a specifier of \"),s(\"code\",[t._v(\"signed\")]),t._v(\" or \"),s(\"code\",[t._v(\"unsigned\")]),t._v(\". A\\nsigned integer is parsed as two's complement format. The default is\\nunsigned.\")]),s(\"p\",[t._v(\"Signedness is ignored in builders.\")]),s(\"h3\",{attrs:{id:\"literal-strings\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#literal-strings\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Literal strings\")]),s(\"p\",[t._v(\"A quoted string appearing in a pattern is a shorthand for the bytes in\\nits UTF8 encoding. For example,\")]),s(\"pre\",[s(\"code\",[t._v('\"foobar\", _/binary\\n')])]),s(\"p\",[t._v(\"matches any buffer that starts with the bytes \"),s(\"code\",[t._v(\"0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72\")]),t._v(\".\")]),s(\"p\",[t._v(\"When used in a builder, a quoted string is copied into the result as\\nthe bytes of its UTF8 encoding.\")]),s(\"h2\",{attrs:{id:\"examples\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#examples\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Examples\")]),s(\"p\",[t._v(\"In the following the matched bytes are given in array notation for\\nconvenience. Bear in mind that \"),s(\"code\",[t._v(\"match()\")]),t._v(' actually takes a buffer for\\nthe bytes to match against. The phrase \"returns X as Y\" or \"binds X as\\nY\" means the return value is an object with value X mapped to the key\\nY.')]),s(\"pre\",[s(\"code\",[t._v(\"54\\n\")])]),s(\"p\",[t._v(\"Matches the single byte \"),s(\"code\",[t._v(\"54\")]),t._v(\".\")]),s(\"pre\",[s(\"code\",[t._v(\"54:32\\n\")])]),s(\"p\",[t._v(\"Matches the bytes [0,0,0,54].\")]),s(\"pre\",[s(\"code\",[t._v(\"54:32/little\\n\")])]),s(\"p\",[t._v(\"Matches the bytes [54,0,0,0].\")]),s(\"pre\",[s(\"code\",[t._v(\"54:4/unit:8\\n\")])]),s(\"p\",[t._v(\"Matches the bytes [0,0,0,54].\")]),s(\"pre\",[s(\"code\",[t._v(\"int:32/signed\\n\")])]),s(\"p\",[t._v(\"Matches a binary of four bytes, and returns a signed 32-bit integer as\\n\"),s(\"code\",[t._v(\"int\")]),t._v(\".\")]),s(\"pre\",[s(\"code\",[t._v(\"len:16, str:len/binary\\n\")])]),s(\"p\",[t._v(\"Matches a binary of \"),s(\"code\",[t._v(\"2 + len\")]),t._v(\" bytes, and returns an unsigned 16-bit\\ninteger as \"),s(\"code\",[t._v(\"len\")]),t._v(\" and a buffer of length \"),s(\"code\",[t._v(\"len\")]),t._v(\" as \"),s(\"code\",[t._v(\"str\")]),t._v(\".\")]),s(\"pre\",[s(\"code\",[t._v(\"len:16, _:len/binary, rest/binary\\n\")])]),s(\"p\",[t._v(\"Matches a binary of at least \"),s(\"code\",[t._v(\"2 + len\")]),t._v(\" bytes, binds an unsigned 16-bit\\ninteger as \"),s(\"code\",[t._v(\"len\")]),t._v(\", ignores the next \"),s(\"code\",[t._v(\"len\")]),t._v(\" bytes, and binds the\\nremaining (possibly zero-length) binary as \"),s(\"code\",[t._v(\"rest\")]),t._v(\".\")]),s(\"pre\",[s(\"code\",[t._v(\"s:8, key:s/binary, value/binary\\n\")])]),s(\"p\",[t._v(\"When given the environment \"),s(\"code\",[t._v('{s:6, key: \"foobar\"}')]),t._v(\", will match a binary\\nstarting with [6, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, ...].\")])])}],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}