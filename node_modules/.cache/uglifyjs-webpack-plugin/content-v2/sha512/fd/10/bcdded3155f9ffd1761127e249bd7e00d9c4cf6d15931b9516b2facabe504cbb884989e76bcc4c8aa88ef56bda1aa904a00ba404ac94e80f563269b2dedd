{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{209:function(t,s,n){\"use strict\";n.r(s);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"div\",{staticClass:\"content\"},[n(\"h1\",{attrs:{id:\"ast-types\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ast-types\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" AST Types \"),n(\"a\",{attrs:{href:\"https://travis-ci.org/benjamn/ast-types\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n(\"img\",{attrs:{src:\"https://travis-ci.org/benjamn/ast-types.svg?branch=master\",alt:\"Build Status\"}})]),n(\"a\",{attrs:{href:\"https://greenkeeper.io/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n(\"img\",{attrs:{src:\"https://badges.greenkeeper.io/benjamn/ast-types.svg\",alt:\"Greenkeeper badge\"}})])]),n(\"p\",[t._v(\"This module provides an efficient, modular,\\n\"),n(\"a\",{attrs:{href:\"https://github.com/ariya/esprima\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Esprima\")]),t._v(\"-compatible implementation of\\nthe \"),n(\"a\",{attrs:{href:\"http://en.wikipedia.org/wiki/Abstract_syntax_tree\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"abstract syntax\\ntree\")]),t._v(\" type hierarchy\\npioneered by the \"),n(\"a\",{attrs:{href:\"https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Mozilla Parser\\nAPI\")]),t._v(\".\")]),n(\"h2\",{attrs:{id:\"installation\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#installation\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Installation\")]),n(\"p\",[t._v(\"From NPM:\")]),n(\"pre\",[n(\"code\",[t._v(\"npm install ast-types\\n\")])]),n(\"p\",[t._v(\"From GitHub:\")]),n(\"pre\",[n(\"code\",[t._v(\"cd path/to/node_modules\\ngit clone git://github.com/benjamn/ast-types.git\\ncd ast-types\\nnpm install .\\n\")])]),n(\"h2\",{attrs:{id:\"basic-usage\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#basic-usage\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Basic Usage\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" assert \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"assert\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" n \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"ast-types\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"namedTypes\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"ast-types\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"builders\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fooId \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"foo\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" ifFoo \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ifStatement\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fooId\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"blockStatement\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"expressionStatement\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"callExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fooId\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ok\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"IfStatement\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ok\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Statement\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ok\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ok\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"BlockStatement\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"consequent\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"strictEqual\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n    ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"consequent\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"body\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"expression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"arguments\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"strictEqual\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"test\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" fooId\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ok\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Expression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"test\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ok\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Identifier\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"test\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"ok\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Statement\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ifFoo\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"test\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),n(\"h2\",{attrs:{id:\"ast-traversal\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ast-traversal\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" AST Traversal\")]),n(\"p\",[t._v(\"Because it understands the AST type system so thoroughly, this library\\nis able to provide excellent node iteration and traversal mechanisms.\")]),n(\"p\",[t._v(\"If you want complete control over the traversal, and all you need is a way\\nof enumerating the known fields of your AST nodes and getting their\\nvalues, you may be interested in the primitives \"),n(\"code\",[t._v(\"getFieldNames\")]),t._v(\" and\\n\"),n(\"code\",[t._v(\"getFieldValue\")]),t._v(\":\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" types \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"ast-types\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" partialFunExpr \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"FunctionExpression\"')]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Even though partialFunExpr doesn't actually contain all the fields that\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// are expected for a FunctionExpression, types.getFieldNames knows:\")]),t._v(\"\\nconsole\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getFieldNames\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"partialFunExpr\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// [ 'type', 'id', 'params', 'body', 'generator', 'expression',\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//   'defaults', 'rest', 'async' ]\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// For fields that have default values, types.getFieldValue will return\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// the default if the field is not actually defined.\")]),t._v(\"\\nconsole\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getFieldValue\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"partialFunExpr\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"generator\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// false\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"Two more low-level helper functions, \"),n(\"code\",[t._v(\"eachField\")]),t._v(\" and \"),n(\"code\",[t._v(\"someField\")]),t._v(\", are\\ndefined in terms of \"),n(\"code\",[t._v(\"getFieldNames\")]),t._v(\" and \"),n(\"code\",[t._v(\"getFieldValue\")]),t._v(\":\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Iterate over all defined fields of an object, including those missing\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// or undefined, passing each field name and effective value (as returned\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// by getFieldValue) to the callback. If the object has no corresponding\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Def, the callback will never be called.\")]),t._v(\"\\nexports\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function-variable function\"}},[t._v(\"eachField\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" callback\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" context\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getFieldNames\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"forEach\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        callback\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"call\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getFieldValue\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" context\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Similar to eachField, except that iteration stops as soon as the\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// callback returns a truthy value. Like Array.prototype.some, the final\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// result is either true or false to indicates whether the callback\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// returned true for any element or not.\")]),t._v(\"\\nexports\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function-variable function\"}},[t._v(\"someField\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" callback\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" context\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getFieldNames\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"some\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" callback\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"call\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getFieldValue\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" context\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"So here's how you might make a copy of an AST node:\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" copy \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"ast-types\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"eachField\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" value\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Note that undefined fields will be visited too, according to\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// the rules associated with node.type, and default field values\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// will be substituted if appropriate.\")]),t._v(\"\\n    copy\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" value\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"But that's not all! You can also easily visit entire syntax trees using\\nthe powerful \"),n(\"code\",[t._v(\"types.visit\")]),t._v(\" abstraction.\")]),n(\"p\",[t._v(\"Here's a trivial example of how you might assert that \"),n(\"code\",[t._v(\"arguments.callee\")]),t._v(\"\\nis never used in \"),n(\"code\",[t._v(\"ast\")]),t._v(\":\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" assert \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"assert\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" types \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"ast-types\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" n \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"namedTypes\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\ntypes\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"visit\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ast\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v('// This method will be called for any node with .type \"MemberExpression\":')]),t._v(\"\\n    visitMemberExpression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Visitor methods receive a single argument, a NodePath object\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// wrapping the node of interest.\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" node \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Identifier\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\"\\n            node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"arguments\"')]),t._v(\" \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\"\\n            n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Identifier\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"property\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            assert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"notStrictEqual\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"property\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"callee\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// It's your responsibility to call this.traverse with some\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// NodePath object (usually the one passed into the visitor\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// method) before the visitor method returns, or return false to\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// indicate that the traversal need not continue any further down\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// this subtree.\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"traverse\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"Here's a slightly more involved example of transforming \"),n(\"code\",[t._v(\"...rest\")]),t._v(\"\\nparameters into browser-runnable ES5 JavaScript:\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"builders\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Reuse the same AST structure for Array.prototype.slice.call.\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" sliceExpr \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"memberExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"memberExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n        b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"memberExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n            b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"Array\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n            b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"prototype\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"slice\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"call\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\ntypes\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"visit\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"ast\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// This method will be called for any node whose type is a subtype of\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Function (e.g., FunctionDeclaration, FunctionExpression, and\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// ArrowFunctionExpression). Note that types.visit precomputes a\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// lookup table from every known type to the appropriate visitor\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// method to call for nodes of that type, so the dispatch takes\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// constant time.\")]),t._v(\"\\n    visitFunction\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Visitor methods receive a single argument, a NodePath object\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// wrapping the node of interest.\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" node \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// It's your responsibility to call this.traverse with some\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// NodePath object (usually the one passed into the visitor\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// method) before the visitor method returns, or return false to\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// indicate that the traversal need not continue any further down\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// this subtree. An assertion will fail if you forget, which is\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// awesome, because it means you will never again make the\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// disastrous mistake of forgetting to traverse a subtree. Also\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// cool: because you can call this method at any point in the\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// visitor method, it's up to you whether your traversal is\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// pre-order, post-order, or both!\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"traverse\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// This traversal is only concerned with Function nodes that have\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// rest parameters.\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"rest\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// For the purposes of this example, we won't worry about functions\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// with Expression bodies.\")]),t._v(\"\\n        n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"BlockStatement\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"assert\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"body\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Use types.builders to build a variable declaration of the form\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//   var rest = Array.prototype.slice.call(arguments, n);\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// where `rest` is the name of the rest parameter, and `n` is a\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// numeric literal specifying the number of named parameters the\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// function takes.\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" restVarDecl \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"variableDeclaration\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"var\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n            b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"variableDeclarator\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n                node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"rest\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"callExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"sliceExpr\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n                    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"arguments\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"literal\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"params\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Similar to doing node.body.body.unshift(restVarDecl), except\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// that the other NodePath objects wrapping body statements will\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// have their indexes updated to accommodate the new statement.\")]),t._v(\"\\n        path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"body\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"body\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"unshift\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"restVarDecl\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Nullify node.rest now that we have simulated the behavior of\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// the rest parameter using ordinary JavaScript.\")]),t._v(\"\\n        path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"rest\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"replace\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"null\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// There's nothing wrong with doing node.rest = null, but I wanted\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// to point out that the above statement has the same effect.\")]),t._v(\"\\n        assert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"strictEqual\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"rest\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"null\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"Here's how you might use \"),n(\"code\",[t._v(\"types.visit\")]),t._v(\" to implement a function that\\ndetermines if a given function node refers to \"),n(\"code\",[t._v(\"this\")]),t._v(\":\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"usesThis\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"funcNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Function\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"assert\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"funcNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" result \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"visit\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"funcNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        visitThisExpression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            result \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// The quickest way to terminate the traversal is to call\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// this.abort(), which throws a special exception (instanceof\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// this.AbortRequest) that will be caught in the top-level\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// types.visit method, so you don't have to worry about\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// catching the exception yourself.\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"abort\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\\n        visitFunction\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// ThisExpression nodes in nested scopes don't count as `this`\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// references for the original function node, so we can safely\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// avoid traversing this subtree.\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\\n        visitCallExpression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" node \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// If the function contains CallExpression nodes involving\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// super, those expressions will implicitly depend on the\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// value of `this`, even though they do not explicitly contain\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// any ThisExpression nodes.\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isSuperCallExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                result \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"abort\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Throws AbortRequest exception.\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"traverse\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Yes, you can define arbitrary helper methods.\")]),t._v(\"\\n        isSuperCallExpression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"callExpr\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"CallExpression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"assert\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"callExpr\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isSuperIdentifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"callExpr\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"callee\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isSuperMemberExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"callExpr\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"callee\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\\n        \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// And even helper helper methods!\")]),t._v(\"\\n        isSuperIdentifier\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Identifier\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"callee\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"callee\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"super\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\\n        isSuperMemberExpression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"MemberExpression\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"callee\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Identifier\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"check\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"callee\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"callee\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"object\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"super\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" result\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"As you might guess, when an \"),n(\"code\",[t._v(\"AbortRequest\")]),t._v(\" is thrown from a subtree, the\\nexception will propagate from the corresponding calls to \"),n(\"code\",[t._v(\"this.traverse\")]),t._v(\"\\nin the ancestor visitor methods. If you decide you want to cancel the\\nrequest, simply catch the exception and call its \"),n(\"code\",[t._v(\".cancel()\")]),t._v(\" method. The\\nrest of the subtree beneath the \"),n(\"code\",[t._v(\"try\")]),t._v(\"-\"),n(\"code\",[t._v(\"catch\")]),t._v(\" block will be abandoned, but\\nthe remaining siblings of the ancestor node will still be visited.\")]),n(\"h2\",{attrs:{id:\"nodepath\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nodepath\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" NodePath\")]),n(\"p\",[t._v(\"The \"),n(\"code\",[t._v(\"NodePath\")]),t._v(\" object passed to visitor methods is a wrapper around an AST\\nnode, and it serves to provide access to the chain of ancestor objects\\n(all the way back to the root of the AST) and scope information.\")]),n(\"p\",[t._v(\"In general, \"),n(\"code\",[t._v(\"path.node\")]),t._v(\" refers to the wrapped node, \"),n(\"code\",[t._v(\"path.parent.node\")]),t._v(\"\\nrefers to the nearest \"),n(\"code\",[t._v(\"Node\")]),t._v(\" ancestor, \"),n(\"code\",[t._v(\"path.parent.parent.node\")]),t._v(\" to the\\ngrandparent, and so on.\")]),n(\"p\",[t._v(\"Note that \"),n(\"code\",[t._v(\"path.node\")]),t._v(\" may not be a direct property value of\\n\"),n(\"code\",[t._v(\"path.parent.node\")]),t._v(\"; for instance, it might be the case that \"),n(\"code\",[t._v(\"path.node\")]),t._v(\" is\\nan element of an array that is a direct child of the parent node:\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parent\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"elements\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"in which case you should know that \"),n(\"code\",[t._v(\"path.parentPath\")]),t._v(\" provides\\nfiner-grained access to the complete path of objects (not just the \"),n(\"code\",[t._v(\"Node\")]),t._v(\"\\nones) from the root of the AST:\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// In reality, path.parent is the grandparent of path:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parentPath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parentPath \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parent\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// The path.parentPath object wraps the elements array (note that we use\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// .value because the elements array is not a Node):\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parentPath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"value \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parent\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"elements\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// The path.node object is the fourth element in that array:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parentPath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"value\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Unlike path.node and path.value, which are synonyms because path.node\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// is a Node object, path.parentPath.node is distinct from\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// path.parentPath.value, because the elements array is not a\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Node. Instead, path.parentPath.node refers to the closest ancestor\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Node, which happens to be the same as path.parent.node:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parentPath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parent\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// The path is named for its index in the elements array:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Likewise, path.parentPath is named for the property by which\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// path.parent.node refers to it:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parentPath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Putting it all together, we can follow the chain of object references\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// from path.parent.node all the way to path.node by accessing each\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// property by name:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parent\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"parentPath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"node\\n\")])]),n(\"p\",[t._v(\"These \"),n(\"code\",[t._v(\"NodePath\")]),t._v(\" objects are created during the traversal without\\nmodifying the AST nodes themselves, so it's not a problem if the same node\\nappears more than once in the AST (like \"),n(\"code\",[t._v(\"Array.prototype.slice.call\")]),t._v(\" in\\nthe example above), because it will be visited with a distict \"),n(\"code\",[t._v(\"NodePath\")]),t._v(\"\\neach time it appears.\")]),n(\"p\",[t._v(\"Child \"),n(\"code\",[t._v(\"NodePath\")]),t._v(\" objects are created lazily, by calling the \"),n(\"code\",[t._v(\".get\")]),t._v(\" method\\nof a parent \"),n(\"code\",[t._v(\"NodePath\")]),t._v(\" object:\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// If a NodePath object for the elements array has never been created\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// before, it will be created here and cached in the future:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"value \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"value\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"elements\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Alternatively, you can pass multiple property names to .get instead of\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// chaining multiple .get calls:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"value \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"value\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"elements\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\")])]),n(\"p\",[n(\"code\",[t._v(\"NodePath\")]),t._v(\" objects support a number of useful methods:\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Replace one node with another node:\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fifth \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"4\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nfifth\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"replace\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Now do some stuff that might rearrange the list, and this replacement\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// remains safe:\")]),t._v(\"\\nfifth\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"replace\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newerNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Replace the third element in an array with two new nodes:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"replace\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"foo\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"thisExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Remove a node and its parent if it would leave a redundant AST node:\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//e.g. var t = 1, y =2; removing the `t` and `y` declarators results in `var undefined`.\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"prune\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//returns the closest parent `NodePath`.\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Remove a node from a list of nodes:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"replace\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Add three new nodes to the beginning of a list of nodes:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"unshift\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" c\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Remove and return the first node in a list of nodes:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"shift\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Push two new nodes onto the end of a list of nodes:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"push\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"d\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" e\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Remove and return the last node in a list of nodes:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"pop\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Insert a new node before/after the seventh node in a list of nodes:\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" seventh \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" path\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"6\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nseventh\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"insertBefore\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nseventh\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"insertAfter\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Insert a new element at index 5 in a list of nodes:\")]),t._v(\"\\npath\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"elements\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"insertAt\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"5\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" newNode\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),n(\"h2\",{attrs:{id:\"scope\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#scope\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Scope\")]),n(\"p\",[t._v(\"The object exposed as \"),n(\"code\",[t._v(\"path.scope\")]),t._v(\" during AST traversals provides\\ninformation about variable and function declarations in the scope that\\ncontains \"),n(\"code\",[t._v(\"path.node\")]),t._v(\". See \"),n(\"a\",{attrs:{href:\"lib/scope.js\"}},[t._v(\"scope.js\")]),t._v(\" for its public\\ninterface, which currently includes \"),n(\"code\",[t._v(\".isGlobal\")]),t._v(\", \"),n(\"code\",[t._v(\".getGlobalScope()\")]),t._v(\",\\n\"),n(\"code\",[t._v(\".depth\")]),t._v(\", \"),n(\"code\",[t._v(\".declares(name)\")]),t._v(\", \"),n(\"code\",[t._v(\".lookup(name)\")]),t._v(\", and \"),n(\"code\",[t._v(\".getBindings()\")]),t._v(\".\")]),n(\"h2\",{attrs:{id:\"custom-ast-node-types\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#custom-ast-node-types\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Custom AST Node Types\")]),n(\"p\",[t._v(\"The \"),n(\"code\",[t._v(\"ast-types\")]),t._v(\" module was designed to be extended. To that end, it\\nprovides a readable, declarative syntax for specifying new AST node types,\\nbased primarily upon the \"),n(\"code\",[t._v('require(\"ast-types\").Type.def')]),t._v(\" function:\")]),n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" types \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"ast-types\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" def \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Type\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"def\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" string \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"builtInTypes\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"string\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" types\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"builders\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Suppose you need a named File type to wrap your Programs.\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"def\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"File\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"bases\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"Node\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"build\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"name\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"program\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"field\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"name\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" string\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"field\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"program\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"def\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"Program\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Prevent further modifications to the File type (and any other\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// types newly introduced by def(...)).\")]),t._v(\"\\ntypes\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"finalize\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// The b.file builder function is now available. It expects two\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v('// arguments, as named by .build(\"name\", \"program\") above.')]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" main \"),n(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"file\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"main.js\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"program\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// Pointless program contents included for extra color.\")]),t._v(\"\\n    b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"functionDeclaration\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"succ\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n        b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"x\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"blockStatement\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n        b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"returnStatement\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n            b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"binaryExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n                \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"+\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"identifier\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"x\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"literal\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"strictEqual\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"main\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"main.js\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nassert\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"strictEqual\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"main\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"program\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"body\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"params\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"x\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// etc.\")]),t._v(\"\\n\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// If you pass the wrong type of arguments, or fail to pass enough\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// arguments, an AssertionError will be thrown.\")]),t._v(\"\\n\\nb\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"file\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"blockStatement\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v('// ==> AssertionError: {\"body\":[],\"type\":\"BlockStatement\",\"loc\":null} does not match type string')]),t._v(\"\\n\\nb\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"file\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token string\"}},[t._v('\"lib/types.js\"')]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{attrs:{class:\"token function\"}},[t._v(\"thisExpression\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{attrs:{class:\"token comment\"}},[t._v('// ==> AssertionError: {\"type\":\"ThisExpression\",\"loc\":null} does not match type Program')]),t._v(\"\\n\")])]),n(\"p\",[t._v(\"The \"),n(\"code\",[t._v(\"def\")]),t._v(\" syntax is used to define all the default AST node types found in\\n\"),n(\"a\",{attrs:{href:\"def/core.js\"}},[t._v(\"core.js\")]),t._v(\",\\n\"),n(\"a\",{attrs:{href:\"def/e4x.js\"}},[t._v(\"e4x.js\")]),t._v(\",\\n\"),n(\"a\",{attrs:{href:\"def/es6.js\"}},[t._v(\"es6.js\")]),t._v(\",\\n\"),n(\"a\",{attrs:{href:\"def/es7.js\"}},[t._v(\"es7.js\")]),t._v(\",\\n\"),n(\"a\",{attrs:{href:\"def/flow.js\"}},[t._v(\"flow.js\")]),t._v(\", and\\n\"),n(\"a\",{attrs:{href:\"def/jsx.js\"}},[t._v(\"jsx.js\")]),t._v(\", so you have\\nno shortage of examples to learn from.\")])])}],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}