{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{281:function(t,s,a){\"use strict\";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"对象是什么？\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象是什么？\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 对象是什么？\")]),a(\"p\",[t._v(\"对象是js的基本数据类型。\\n对象是属性的无序集合，每个属性都是名/值对。\\n属性名是字符串，因此我们可以把对象看成是从字符串到值的映射。\")]),a(\"p\",[t._v(\"对象不仅仅是字符串到值的映射，除了可以保持自由的属性，js对象还可以从一个称为原型的对象继承属性。\")]),a(\"p\",[t._v(\"对象的方法通常都是继承的属性。这种原型式继承是js的核心特征。\")]),a(\"p\",[t._v(\"js的对象是动态的——可以新增也可以删除属性——但它们常用来模拟静态对象以及静态类型语言中的结构体。它们也可以用作字符串的集合。\")]),a(\"p\",[a(\"strong\",[t._v(\"对象是可变的，我们通过引用而非值来操作对象。如果变量x是指向一个对象的与弄，那么执行代码\"),a(\"code\",[t._v(\"var y = x\")]),t._v(\"变量y也是指向同一个对象的引用，而非这个对象副本。通过y修改这个对象也会对x造成影响。\")])]),a(\"p\",[t._v(\"对象最常见的用法是create,set,query,delete,test,enumerate。\")]),a(\"p\",[t._v(\"对象的属性包含：名字和值。\\n属性名可以是空字符串在内的任意字符串，但对象不能存在2个同名的属性。\\n每个属性还有一些与之相关的值，成为“属性特性”：\")]),a(\"ul\",[a(\"li\",[t._v(\"可写，表明是否可以设置该属性的值\")]),a(\"li\",[t._v(\"可枚举，表明是否可以通过for/in循环返回该属性\")]),a(\"li\",[t._v(\"可配置，表明是否可以删除或修改该属性\")])]),a(\"p\",[t._v(\"在es5中，通过代码给对象创建的所有属性都是可写的，可枚举的和课配置的。es5中则可以的这些特性加以配置。\")]),a(\"p\",[t._v(\"每个对象有3个对象特性；\")]),a(\"ul\",[a(\"li\",[t._v(\"对象的原型指向另一个对象的，本对象的属性继承自它的原型对象。\")]),a(\"li\",[t._v(\"对象的类是一个标识对象类型的字符串。\")]),a(\"li\",[t._v(\"对象的扩展标记指明了是否可以向该对象添加新属性。\")])]),a(\"p\",[t._v(\"对象和属性可分为以下几类：\")]),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"内置对象，是由es规范定义的对象或类。如：数组、函数、日期和正则表达式都是内置对象。\")])]),a(\"li\",[a(\"p\",[t._v(\"宿主对象，是由js解释器所嵌入的宿主环境所定义的。客户端js中表示网页结构的HTMLElement对象均是属猪对象。既然宿主对象环境定义的方法可以当成普通的js函数对象，那么宿主对象也可以当成内置对象。\")])]),a(\"li\",[a(\"p\",[t._v(\"自定义对象，是由运行在js代码创建的对象。\")])]),a(\"li\",[a(\"p\",[t._v(\"自有属性，直接在对象中定义的属性。\")])]),a(\"li\",[a(\"p\",[t._v(\"继承属性，是在对象的原型对象中定义的属性。\")])])]),a(\"h2\",{attrs:{id:\"创建对象\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建对象\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 创建对象\")]),a(\"h3\",{attrs:{id:\"对象直接量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象直接量\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 对象直接量\")]),a(\"p\",[t._v(\"创建对象，最简单的方法是在js代码中使用对象直接量。\\n对象直接量由若干个名/值对组成的隐射表，明值对中间用冒号分割，名/值对之间用逗号分割，整个映射表用花括号括起来。\")]),a(\"p\",[t._v(\"属性名可以是js标识符也可以是字符串直接量（包括空字符）。\\n属性的值可以是任意类型的js表达式，表达式的值就是这个属性的值。\")]),a(\"p\",[a(\"strong\",[t._v(\"重要\")]),t._v(\"：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" empty \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" point \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" book \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"''\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" js\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 空字符串也可以做属性名，但必须用引号包起来\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'sub-title'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'theiekd'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 中间有连字符-，需要用连字符抱起来\")]),t._v(\"\\n    author\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        firstname \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'wang'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        surname\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'goo'\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'for'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'dkdk'\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 保留字也必须用引号包起来\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"在调用对象的属性时，如果是保留字和符合变量命名规则的属性名，那么可以通过.来进行调用。如上代码：\\nbook.author，book.for可以调用属性。\\n但sub-title的值，以及''的值，必须通过[]的方法来进行调用。也就是：\"),a(\"code\",[t._v(\"book['sub-title'],booke['']\")]),t._v(\"来进行调用。\\n在[]内的数据类型必须是字符串,用引号包起来。\")]),a(\"p\",[t._v(\"对象直接量是一个表达式，这个表达式每次运算都会创建并初始化一个新的对象。\\n每次计算对象直接量的时候，也会计算它的每个属性的值。\")]),a(\"h3\",{attrs:{id:\"通过new创建对象\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通过new创建对象\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 通过new创建对象\")]),a(\"p\",[t._v(\"new 运算符创建并初始化一个新对象。关键字new后面跟随一个函数的调用。这里的函数作为构造函数，构造函数用以初始化一个新创建的对象。js语言核心中的原始类型都包含内置构造函数。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Array\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 创建一个空数组\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" d \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Date\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 创建一个表示当前时间的date对象\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" r \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"RegExp\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'js'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//产点一个可以进行模式匹配的RegExp对象。\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"除了这些内置的构造函数，用自定义的构造函数，来初始化新对象也是非常常见的。\")]),a(\"h2\",{attrs:{id:\"原型和object-create\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原型和object-create\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 原型和Object.create()\")]),a(\"p\",[a(\"strong\",[t._v(\"原型\")]),t._v('：除了null之外，每一个js对象都与另一个对象项关联。\"另一个\"对象就是我们熟知的原型，每一个对象都从原型继承属性。')]),a(\"ul\",[a(\"li\",[t._v(\"所有通过对象直接量创建的对象都具有同一个对象原型。\")]),a(\"li\",[t._v(\"通过new和构造函数调用创建的对象原型就是构造函数的prototype属性的值。\")])]),a(\"p\",[t._v(\"于我看来，js有一个母原型Object(null表示非对象，无原型)，位于原型链的最上层,Object.prototype是用来填充所有的属性名的。\")]),a(\"p\",[t._v(\"在Object.prototype中定义了各类对象，如数组对象，函数对象和Date对象等。这些数组对象，原型对象和data对象的原型都是Object.prototype。\")]),a(\"p\",[t._v(\"通过new和构造函数分别创建并初始化了一个新的对象，如new Array(),这个对象，继承自Array.prototype,同时也继承自Object.prototype.\")]),a(\"h3\",{attrs:{id:\"object-create\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-create\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Object.create()\")]),a(\"p\",[t._v(\"es5定义了一个名为Object.create(,)的方法，它创建一个新对象，其中第一个参数是这个对象的原型，第二个可选的参数，用以对对象的属性进行进一步描述。\")]),a(\"p\",[a(\"code\",[t._v(\"var o1 = Object.create({x:1,y:2});\")]),t._v(\" o1继承了属性x和y，以及x,y的值。\\n但是直接console.log(o1);则是打印不出来o1的属性，但可以通过for/in语句把它枚举出来。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"var o1 = Object.create({a:1,b:2});\\nconsole.log(o1);\\nfor(prop in o1) {console.log(prop)};\\nconsole.log(o1.a);\\n\")])]),a(\"p\",[t._v(\"如果想创建一个普通的空对象，可以通过{}或new Object()创建对象，需要传入Object.prototype:\\n\"),a(\"code\",[t._v(\"var o3 = Object.create(Object.prototype) // o3和{}和new Object()一样\")])]),a(\"p\",[t._v(\"可以通过任意原型创建新对象（也就是说，可以使任意对象可继承）\")]),a(\"p\",[a(\"strong\",[t._v(\"inherit()函数。\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"inherit\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"p \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"TypeError\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" p是一个对象，但不能是\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"create\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 如果Object.create存在，就用这个方法\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" t \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"typeof\")]),t._v(\" p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"t \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!==\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'object'\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" t \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!==\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'function'\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"TypeError\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"f\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 定义一个空构造函数\")]),t._v(\"\\n    f\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"prototype \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//将其原型属性设置为p.\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"f\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 通过f()创建p的继承对象。\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"inherit()函数的一个用途就是防止库函数无意间修改哪些不受你控制的对象。不是讲对象直接作为参数传输函数，而是将它的继承对象传入函数。当函数读取继承对象的属性时，实际上读取的是继承来的值。\\n如果给继承对象的属性赋值，则这些属性只会影响这个继承对象自身，而不是原始对象。\")]),a(\"h2\",{attrs:{id:\"属性的查询和设置\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性的查询和设置\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 属性的查询和设置\")]),a(\"p\",[t._v(\"可以通过.和[]运算符来获取属性的值。运算符左侧应该是一个表达式，它返回一个对象。\\n对于.来说，右侧必须是一个以属性名称命名的简单标识符。\\n对于[]来说，[]内必须是一个计算结果为字符串的表达式。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" author \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"author\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" author1 \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'auther'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// author 和author1是等值的，右侧的也是等价的。\")]),t._v(\"\\n                             \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 能通过.获取的属性，也可以通过[]来获取，不过[]内必须加上引号变为字符串。\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" name \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" author\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"surname\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" title \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'main title'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 属性名有空格，就鄙视通过[]来获取。\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"当使用[]时，[]内的表达式必须返回字符串。其实更严格的讲，表达式必须返回字符串或返回一个可以转换为字符串的值。\")]),a(\"h2\",{attrs:{id:\"关联数组\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关联数组\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 关联数组\")]),a(\"p\",[t._v(\"obj.property\\nobj['property']\\n以上两个表达式是等价的，类似数组，只是素组的索引不是数字，而是一个字符串。数组是关联数组。js对象都是关联数组，也可以成为散列、映射或字典。\")]),a(\"p\",[t._v(\"js是弱类型的语言，也就是说在任何对象中程序可以创建任意数量的属性。\\n但当通过\"),a(\"code\",[t._v(\".点运算符\")]),t._v(\"来访问对象属性时，属性名是一个标识符来表示。标识符必须直接出现在js程序中，它们不是数据类型，因此程序无法修改它们。\")]),a(\"p\",[t._v(\"反过来讲，当通过[]来访问对象属性时，属性名是通过字符串来表示的。字符串是js的数据类型，在程序运行时可以修改和创建它们，如：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" addr \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"''\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" customer \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"address1\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"123\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"address2\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"address3\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1111\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"4\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    addr \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+=\")]),t._v(\" customer\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'address'\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'\\\\n'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"说明数组写法和用字符串表达式来访问对象属性的灵活性。标识符作为是静态的，必须写死在程序中，作为属性的索引，是不能改变的。\")]),a(\"h3\",{attrs:{id:\"继承\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#继承\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 继承\")]),a(\"p\",[t._v('js对象具有\"自有属性\"，也有一些属性是从原型对象继承而来的。')]),a(\"blockquote\",[a(\"p\",[t._v(\"继承来的对象，也和其原型不相等。\"),a(\"code\",[t._v(\"a = {x:1};b = Object.create(a);a===b // =>false\")])])]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 枚举属性\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"hasProp\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"prop \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"prop\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 继承举例\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\np\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"y \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" q \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nq\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"z \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nq\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"31\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" s \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" q\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"toString\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"q\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" q\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"hasProp\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"q\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"假设要查询o的属性，如果o中不存在这个属性，那么将会继续在o的原型对象中查询属性x。\\n如果原型对象中也没有x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x或查找到一个原型是null的对象为止。\")]),a(\"p\",[t._v(\"属性赋值操作首先检查原型链，以此判定是否允许赋值操作。\\n例如，如果o继承自一个只读属性x，那么赋值操作是不允许的。\")]),a(\"p\",[t._v(\"如果允许属性赋值操作，它总是在原始对象上创建属性或对已有的属性赋值，而不会修改原型链。\\n在js中，只有在查询属性的时候，才体会到继承的存在，而设置属性和继承无关，这是js的一个重要的特性，该特性可以让程序员优选择的覆盖继承的属性。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" c \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nc\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"y \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" c\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"z \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nc\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// c覆盖继承来的属性。\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"属性赋值要么失败，要么创建一个新属性，要么在原始对象中设置属性，但又一个例外，如果o继承自属性x,而x这个属性是一个具有setter方法的accessor属性，那么这是将调用setter方法而不是给o创建一个属性x。需要注意的是，setter方法是由o的对象调用的，而不是定义x的原型对象调用的。因此如果setter方法定义任意属性，这个操作只针对o本身，并不会修改原型链。\")]),a(\"h3\",{attrs:{id:\"属性访问错误\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性访问错误\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 属性访问错误\")]),a(\"ul\",[a(\"li\",[t._v(\"查询一个不存的属性并不会报错，如果在对象o或继承的属性中均未找到x，会返回一个undefined。\")]),a(\"li\",[t._v(\"如果 对象不存在，那么试图查找不存在的对象的属性，会报错。null和undefined值都没有属性。\")])]),a(\"p\",[t._v(\"除非确定book和book.subtitle都是对象，否则不能写book.subtitle.length，因为这样会报错。\\n可以用2中方法避免：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" len \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" undefined\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"subtitle\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        len \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"subititle\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// \\x3c!-- 或者更简单的 --\\x3e\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" len \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" book \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"subtitle \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" book\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"subtitle\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 只有当左值为真的时候，才会返回最右边的值。如果左值为假，直接返回。\")]),t._v(\"\\n\")])]),a(\"ul\",[a(\"li\",[t._v(\"内置构造函数的原型是只读的。\\n\"),a(\"code\",[t._v(\"Object.prototype = 0\")]),t._v(\" //赋值失败，但不报错，Object.prototype没有修改。\")])]),a(\"p\",[t._v(\"以下场景给对象o赋值属性p会失败：\")]),a(\"ul\",[a(\"li\",[t._v(\"o中的属性p是只读的（defineProperty()方法中有一个例外）\")]),a(\"li\",[t._v(\"o中的属性p是继承属性，且它是只读的：不能通过同名自由属性覆盖只读的继承属性。\")]),a(\"li\",[t._v(\"o中不存在自有属性p：o没有使用setter方法继承属性p，并且o的可扩展性为false.\")])]),a(\"p\",[t._v(\"如果o中不存在自有属性p，且没有setter方法可调用，那么p一定会添加入o中。\")]),a(\"h3\",{attrs:{id:\"删除属性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#删除属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 删除属性\")]),a(\"p\",[t._v(\"delete运算符删除对象的属性。\\ndelete obj.indentifier\\ndelete obj['expresson']\")]),a(\"ol\",[a(\"li\",[t._v(\"delete运算符只能删除自有属性，不能删除继承属性（要删除继承的属性必须从定义这个属性的原型对象上删除它，这会影响到所有继承自这个原型的对象）。\")]),a(\"li\",[t._v(\"delete表达式删除成功或没有副作用时，返回true.\")]),a(\"li\",[t._v(\"delete后不是一个属性访问表达式，同样返回true.\")]),a(\"li\",[t._v(\"delete不能删除那些可配置为false的属性。某些内置对象的属性是不可配置的。比如通过var声明和函数声明创建的全局对象属性。\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"delete\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"prototype\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// false，不能删除。\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" x\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//声明一个全局变量\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"delete\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// false，不能删除。\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"f\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"delete\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"f\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// false,不能删除。\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 在严格模式下，\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"delete\")]),t._v(\" x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 报错，语法错误。\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"delete\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 正常工作\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 通过this创建可配置的全局属性。\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"m \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"delete\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"m\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// true.\")]),t._v(\"\\n\")])]),a(\"h2\",{attrs:{id:\"检测属性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#检测属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 检测属性\")]),a(\"p\",[t._v(\"js对象可以看做是属性的集合，我们经常会检测集合中成员的所属关系——判断某个属性是否存在于某个对象中。\")]),a(\"p\",[t._v(\"**in运算符：**如果对象的自有属性或继承属性中包含这个属性则返回true。\\n左侧是属性名（字符串,不是字符串会报错），右侧是对象。\")]),a(\"p\",[t._v(\"也可以使用'!=='判断一个属性是否存在。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!==\")]),t._v(\" undefined\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// true;\")]),t._v(\"\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"y \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!==\")]),t._v(\" undefined\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// falsel\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"不过如果o={x: undefined}时，就必须通过in来进行。\")]),a(\"p\",[t._v(\"这里必须是使用运算符'!=='，而不是'!='。'!=='可以区分undefined 和 null。\")]),a(\"p\",[a(\"strong\",[t._v(\"hasOwnProperty()方法：\"),a(\"strong\",[t._v(\"用来检测给定的名字\")]),t._v(\"是否是对象的自有属性。对于继承属性它将返回false.\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"y \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nx\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"hasOwnProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'x'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\ny\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"hasOwnProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'y'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nz\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"hasOwnProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'toString'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"z\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[a(\"strong\",[t._v(\"propertyIsEnumerable()\"),a(\"strong\",[t._v(\"是hasOwnproperty()的增强版，只有检测到是\")]),t._v(\"自有属性且这个属性的可枚举性\")]),t._v(\"为true时，才返回true。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"propertyIsEnumerable\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'x'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"propertyIsEnumerable\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'y'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" c \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"prototype\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"propertyIsEnumerable\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'toString'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"b\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"c\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"h2\",{attrs:{id:\"枚举属性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#枚举属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 枚举属性\")]),a(\"p\",[t._v(\"for/in循环可以历遍对象中所有可枚举的属性，把属性名复制给循环变量。\\n对象继承的内置方法是不可枚举的。\\n但代码中给对象添加的属性都是可枚举的。\")]),a(\"p\",[t._v(\"因为有一些工具库给Object.prototype添加了新的方法或属性，这些方法和属性可以被所有对象继承并使用。然而在es5标准之前，这些新添加的方法是不能定义为不可枚举的。因此它们都可以在for/in循环中枚举出来。\\n\"),a(\"strong\",[t._v(\"不过现在都已经到了es6了，所以这个就不做讨论了\")])]),a(\"p\",[t._v(\"除了for/in循环，es5定义了2个用来枚举属性名称的函数。\")]),a(\"ul\",[a(\"li\",[t._v(\"Object.keys(),它返回一个数组，由\"),a(\"strong\",[t._v(\"可枚举的自有属性\")]),t._v(\"的名称组成。\")]),a(\"li\",[t._v(\"Object.getOwnPropertyNames(),\"),a(\"strong\",[t._v(\"只是它只返回对象的所有自有属性的名称，而不仅仅是可枚举的属性，不可枚举的自有属性也会返回。\")])])]),a(\"h2\",{attrs:{id:\"属性setter和getter\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性setter和getter\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 属性setter和getter\")]),a(\"p\",[t._v('对象属性是由名字、值和一组特性(attribute)构成的。\\n属性值可以通过2个方法替代，这两个方法是getter和setter。\\n由getter和setter定义的属性称作\"存取器属性\"。\\n不同于数据属性，数据属性只是一个简单的值。')]),a(\"p\",[t._v(\"存取器属性不具有可写性。如果属性同时具有getter和setter方法，那么它是一个读/写属性。\\n如果它只有getter方法，那么它是一个只读属性。\\n如果它只有setter方法，那么它是一个只写属性，读取只写属性总是返回undefined。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" gf \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"age\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"18\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\ngf\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"boyFriend \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'zhili'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"gf\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"age\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"gf\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"boyFriend\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\ngf\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"age \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"19\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"gf\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"age\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"定义存储器属性最简单的方法是使用对象直接量语法的一种扩展写法：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   data_prop\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//普通的数据属性,\")]),t._v(\"\\n\\n   \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),t._v(\" accessor_prop\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/*这里是函数体，返回accessor_prop的值*/\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n   \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"set\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"accessor_prop\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"/*这里是函数体，value的值是新值*/\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"当一个属性是存取器属性时：\\n当程序查询存取器属性的值时，js调用getter方法，这个方法返回值就是属性存取表达式的值。\\n当程序设置一个存取器属性的值时，js调用setter方法，将属性表达式右侧的值当做参数传入setter。从某种意义上讲，这个方法负责“设置”属性值，可以忽略setter方法的返回值。\")]),a(\"p\",[t._v(\"和数据属性一样，存取器属性是可以继承的，因此将上述代码中的对象p当成另一个“点”的原型。可以给新对象定义它的x和y属性，但r和theta属性是继承来的：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" q \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nq\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"q\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"y \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"q\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"r\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 可以使用继承的存取器属性\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"q\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"theta\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 自增属性\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    $n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"get\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"next\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"$n\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"set\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"next\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"$n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"$n \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'不能比之前的值小'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\n\")])]),a(\"h2\",{attrs:{id:\"属性的特性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性的特性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 属性的特性\")]),a(\"p\",[t._v(\"除了名和值之外，属性还包含一些标识它们可写、可枚举和可配置的特性。\\n在es5中，查询和设置这些属性特性的api。\")]),a(\"p\",[t._v(\"一个数据属性：\\n包含1个名字和4个特性，分别是：\\n值(value)、可写性(writable)、可枚举(enumerable)和可配置(configurable)。\")]),a(\"p\",[t._v(\"存取器属性的四个特性是：\\n读取(get)、写入(set)、可枚举和可配置性。\")]),a(\"p\",[t._v(\"为了查询和设置操作，es5定义了一个名为“属性描述符”的对象，描述对象的属性和它们所描述的属性特性是同名的。\")]),a(\"p\",[t._v(\"因此一个数据属性的描述符对象的属性有：value，writable，enumerable,configurable.\\n存取器属性的描述对象是：get,set,enumerable,configurable.\")]),a(\"p\",[t._v(\"writable:是否可以进行赋值操作。\\nenumerable：是否可以进行for/in进行枚举列出。\\nconfigurable：是否可以对属性的特性进行修改。（当configurable:false时，只能是writable从true变为false）\\nvalue:属性的值。writable可以控制它。configurable也可以控制它。\")]),a(\"p\",[a(\"strong\",[t._v(\"Object.getOwnPropertyDestriptor()方法，获取属性的描述符\")]),t._v(\"\\n通过Object.getOwnPropertyDestriptor()\"),a(\"strong\",[t._v(\"可以获得某个对象特定属性的属性描述符，返回的是一个对象,传输的参数是一个对象，和一个字符串（字符串是属性名）。\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" c \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getOwnPropertyDescriptor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'x'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"c\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nd \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getOwnPropertyDescriptor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'x'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"d\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// undefined，不能获得继承来的对象的属性特性。\")]),t._v(\"\\ne \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getOwnPropertyDescriptor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'y'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"e\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// undefined,不能获取不存在的属性的属性特性。\")]),t._v(\"\\n\\n\")])]),a(\"p\",[t._v(\"Object.getOwnPropertyDestriptor()\"),a(\"strong\",[t._v(\"只能得到自有属性的描述符。\")]),t._v(\"\\n要想得到继承属性的特性，需要历遍原型链。\")]),a(\"p\",[t._v(\"**Object.definePeoperty()**方法，定义属性的描述符。\\n要想设置属性的特性，或者想让某个新建属性具有某种特性，可以调用Object.definePeoperty()方法，传入要修改的、要创建或修改的属性的名称以及属性描述符对象：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 属性参数改写\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"defineProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'x'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    writable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    enumerable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    configurable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"keys\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"defineProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'x'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    writable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"Object.defineProperty()\"),a(\"strong\",[t._v(\"方法，要么修改已有属性，要么新建自有属性，但不能修改继承属性。\")])]),a(\"p\",[t._v(\"如果要同时修改或创建一个对象的多个属性，则需要使用Object.defineProperties().\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"defineProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    z\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"需要注意的：\")]),a(\"ul\",[a(\"li\",[t._v(\"如果对象是不可扩展的，（\"),a(\"em\",[t._v(\"注意：对象是不可扩展的，则给它新增属性就会抛出类型错误异常\")]),t._v(\"）\")]),a(\"li\",[t._v(\"可配置性控制着对其他特性的修改。（包括属性是否可以删除）。\")]),a(\"li\",[t._v(\"如果属性configurable是true, 那么可以修改不可写属性的值。\")]),a(\"li\",[t._v(\"如果属性configurable是false，扔可修改可写属性改为不可写属性。\")])]),a(\"p\",[t._v(\"具体规则如下：\")]),a(\"ol\",[a(\"li\",[t._v(\"如果对象是不可扩展的，则可以编辑已有的自由属性，但不能给它添加新属性。\")]),a(\"li\",[t._v(\"如果属性是不可配置的，则不能修改它的可配置性和枚举性.\\n也就是说，当一个属性的configurable在定义时是false.(\"),a(\"code\",[t._v(\"configurable:flase\")]),t._v(\"),那么当使用Object.defineProperty等方法时，会抛出错误\"),a(\"code\",[t._v(\"Cannot redefine property:\")]),t._v(\"，必须先到定义属性的源代码中，修改configurable的值为true。\")]),a(\"li\",[t._v(\"如果存取器属性是不可配置的，则不能修改其getter和setter方法，也不能将其转换为数据属性。\")]),a(\"li\",[t._v(\"如果数据属性是不可配置的， 则不能将它转换为存取器属性。\")]),a(\"li\",[t._v(\"如果数据属性是不可配置的，则不能将它的可写性从false修改为true，但可以从true修改为false。\\n也就是说，当configurable:false,writable:false,那么这个属性的值value是无法通过Object.defineProperty()方法修改的，用对象直接量修改也不行。\")]),a(\"li\",[t._v(\"如果数据属性是不可配置且不可写的，则不能修改它的值,\"),a(\"code\",[t._v(\"defineProperty()\")]),t._v(\"方法使用会报错。然而可配置但不可写属性的值是可以修改的。\\n如果configurable:true,writable:false。不能直接通过x.a = 3来进行修改属性，但可以通过Object.defineProperty()（\"),a(\"em\",[t._v(\"一下简称为x()\")]),t._v(\"）方法来修改value的值。\\n如果configurable:false,writable:true。可以直接通过直接量的方式以及\"),a(\"code\",[t._v(\"defineProperty()\")]),t._v(\"方法来修改value的值。\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[t._v(\"   \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"defineProperties\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        writable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        enumerable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        configurable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        value\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        writable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        enumerable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        configurable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"defineProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'y'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    configurable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    enumerable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" xDescribeProp \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getOwnPropertyDescriptor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'x'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"xDescribeProp\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" yDescribeProp \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getOwnPropertyDescriptor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'y'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"yDescribeProp\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"defineProperty\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'y'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    configurable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    enumerable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" yDescribeProp \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"getOwnPropertyDescriptor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'y'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"yDescribeProp\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\")])]),a(\"h2\",{attrs:{id:\"对象的三个属性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象的三个属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 对象的三个属性\")]),a(\"p\",[t._v(\"每一个对象都有与之相关的原型、类和可扩展性。\")]),a(\"h4\",{attrs:{id:\"原型属性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原型属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 原型属性\")]),a(\"p\",[t._v(\"对象直接量使用Object.prototype作为它们的原型。\\n通过new创建的对象使用构造函数的prototype作为它们的原型。\\n通过Object.create()创建的对象使用第一个参数作为它们的原型。\")]),a(\"p\",[t._v(\"es5中，通过Object.getPrototypeOf()可以查询它的原型。\")]),a(\"p\",[t._v(\"要检测一个对象是否是另一个对象的原型，可以使用isPrototypeOf()方法。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" p \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"p\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\np\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPrototypeOf\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// true:o继承自p\")]),t._v(\"\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"prototype\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPrototypeOf\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// true:p继承自Object.prototype\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"prototype\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPrototypeOf\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//true: 对象直接量a的原型也是Object.prototype\")]),t._v(\"\\n\")])]),a(\"h3\",{attrs:{id:\"类属性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 类属性\")]),a(\"p\",[t._v(\"对象的类属性是一个字符串，用以表示对象的类型信息。\\n默认的toString()方法继承自Object.prototype，返回如下格式的字符串：\"),a(\"code\",[t._v(\"[object class]\")]),t._v(\".\\n因此，想要获得对象的类，可以调用对象的toString()方法，然后获取第8个到倒数第2个位置之间的字符。\\nb不过很多版本的toString()方法重写了，为了确保调用的是正确的toString()版本，必须简洁地调用function call()方法。如下：\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"classof\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"Null\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" undefined\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"Undefined\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"prototype\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"toString\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"call\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"slice\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"8\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"通过构造函数创建的对象包含“类属性”，它与构造函数名称相匹配。\\n通过对象直接量与Object.create创建的对象的类属性是“Object”。\\n那些自定义构造函数创建的对象也是一样，类属性也是“Objcet”.\")]),a(\"h3\",{attrs:{id:\"可扩展性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可扩展性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 可扩展性\")]),a(\"p\",[t._v(\"对象的可扩展性用以表示是否可以给对象添加新属性。\\nes5中，所有的内置对象和自定义对象都是显式可扩展的，除非将他们转换为不可扩展的。\")]),a(\"h4\",{attrs:{id:\"object-isextensible-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-isextensible-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Object.isExtensible()方法\")]),a(\"p\",[t._v(\"通过Object.isExtensible()方法，来判断该对象是否是可扩展的。\"),a(\"strong\",[t._v(\"犀牛书写错了，是isExtensible()方法\")])]),a(\"h4\",{attrs:{id:\"object-preventextensions-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-preventextensions-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Object.preventExtensions()方法\")]),a(\"p\",[t._v(\"如果想将对象转换为不可扩展的，需要调用Object.preventExtensions(),将需要转换的对象作为参数传进去。\")]),a(\"p\",[t._v(\"注意：\")]),a(\"ol\",[a(\"li\",[t._v(\"一旦将对象转换为不可扩展的，那就再也无法将其转换为可扩展的了。除非源代码删除代码。\")]),a(\"li\",[t._v(\"preventExtensions()只影响到对象本身的可扩展性，，如果给一个不可扩展的\"),a(\"strong\",[t._v(\"对象原型\")]),t._v(\"添加了新属性，那么这个不可扩展的对象同样会继承这些新属性。\")])]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" b \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nObject\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"preventExtensions\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 不可扩展了\")]),t._v(\"\\nb\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"z \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" c\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isExtensible\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"c\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// false，b的属性不可扩展\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"z\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\na\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"z \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 但是可以通过原型新增属性，给到b。\")]),t._v(\"\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"z\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 3\")]),t._v(\"\\n\")])]),a(\"h4\",{attrs:{id:\"object-seal-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-seal-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Object.seal()方法\")]),a(\"p\",[t._v(\"除了能将对象设置为不可扩展的之外，还可以将对象的所有自有属性都设置为不可配置的。也就是说，不能给这个对象新增属性，它已有的属性也不能删除或配置，不过它已有的可写属性依然可以设置。\")]),a(\"p\",[t._v(\"对于那些已经封闭（sealed）起来的对象是不能解封的，可以通过Object.isSealed()来检测对象是否封闭。(除非删除代码)\")]),a(\"h4\",{attrs:{id:\"object-freeze-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-freeze-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Object.freeze()方法\")]),a(\"p\",[t._v(\"Object.freeze()将更严格的锁定对象——冻结(frozen).除了将对象设置为不可扩展的，属性设置为不可配置的之外，还可以把它自有的所有数据属性设置为只读的。\\n(如果对象的存取器属性具有setter属性，那么存取器属性将不受影响，扔可以通过给属性赋值调用它们)\")]),a(\"p\",[t._v(\"Object.preventExtensions()、Object.seal()和Object.freeze()都返回传入的对象。\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"seal\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n   Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"create\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n    Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"freeze\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"writable\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// x属性不可配置，不可更改，只读，且是继承来的。y属性可写，可读，是自有属性。o对象的自有属性不可配置，即y属性不可配置，不可删除。\")]),t._v(\"\\n\")])]),a(\"h3\",{attrs:{id:\"序列化对象\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#序列化对象\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 序列化对象\")]),a(\"p\",[t._v(\"对象序列化（serialization）是指可将对象的状态转换为字符串，也可将字符串还原为对象。es提供了内置函数JSON.stringify()和JSON.parse()用来序列化和还原js对象。\\n这些方法都使用JSON作为数据交换格式，JSON的全称是：JavaScript Object Notation.\")]),a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    x\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    y\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        z\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v(\"''\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\ns \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token constant\"}},[t._v(\"JSON\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"stringify\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\np \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token constant\"}},[t._v(\"JSON\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"parse\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),a(\"p\",[t._v(\"需要注意点：\")]),a(\"ol\",[a(\"li\",[t._v(\"NaN、Infinity,-Infinity序列化的结果是null。\")]),a(\"li\",[t._v(\"日期对象序列化的结果是ISO格式的日期字符串，但JSON.parse()依旧保留它们的字符串形态，而不会将它们还原为原始日期对象。\")]),a(\"li\",[t._v(\"函数、RegExp、Error对象和undefined值不能序列化和还原。\")]),a(\"li\",[t._v(\"JSON.stringif()只能序列化对象可枚举的自有属性。对于一个不能序列化的属性来说，在序列化后的输出字符串会将这个属性省略掉。\")]),a(\"li\",[t._v(\"JSON.stringif()和JSON.parse()都可以接受第二个可选参数，通过传入需要序列化或还原的属性列表来定制自定义的序列化或还原操作。\")])]),a(\"h4\",{attrs:{id:\"对象的方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象的方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 对象的方法\")]),a(\"h5\",{attrs:{id:\"tostring-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tostring-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" toString()方法\")]),a(\"p\",[t._v(\"toString()方法没有参数，它将返回一个表示调用这个方法的对象值的字符串。\")]),a(\"p\",[t._v(\"在需要将对象转换为字符串时，js都会调用这个方法。比如，一个字符串和一个对象通过+运算符连接时，或者在使用字符串的方法中使用了对象时，都会调用toString()方法。\")]),a(\"p\",[t._v(\"默认的toString()方法返回的信息量很少，因此很多类自定义有toStrin()方法。\\nArray.toString()方法返回一个数组元素列表。\\nFunction.toString()方法返回一个函数的源代码。\\n\"),a(\"strong\",[t._v(\"toString()方法返回的都是字符串。\")])]),a(\"h5\",{attrs:{id:\"tolocalestring-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tolocalestring-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" toLocaleString()方法\")]),a(\"p\",[t._v(\"对象都包含toLocaleString()方法，返回一个表示这个对象的本地化字符串。\")]),a(\"p\",[t._v(\"Object中默认的toLocaleString()方法并不做任何本地化自身的操作，它仅调用toString()方法并返回对应值。\\nDate类和Number类对toLocaleString()方法和toString()方法很像，唯一不同的是每隔数组元素会调用toLocaleString()方法转换为子夫人，而不是调用各自的toString()方法。\")]),a(\"h4\",{attrs:{id:\"tojson-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tojson-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" toJSON()方法\")]),a(\"p\",[t._v(\"Object.prototype实际上并没有toJSON()方法。\\n但对于需要执行序列化的对象戴洛，JSON.stringify()方法会调用toJSON()方法。\\n如果在待序列化的对象中存在这个方法，则调用它，返回值就是序列化的结果，而不是原始对象。\")]),a(\"h4\",{attrs:{id:\"valueof-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#valueof-方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" valueOf()方法\")]),a(\"p\",[t._v(\"valueOf()方法和toString()方法非常类似，但往往当js需要将对象转换为某个原始值，而非字符串的时候才会调用它，尤其是转换为数字的时候。\\n如果在需要使用原始值的上下文中使用了对象，js就会自动调用这个方法。\")])])}],!1,null,null,null);s.default=o.exports}}]);","extractedComments":[]}